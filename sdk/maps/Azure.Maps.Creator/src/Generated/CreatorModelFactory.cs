// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Maps.Creator.Models;

namespace Azure.Maps.Creator
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class CreatorModelFactory
    {
        /// <summary> Initializes new instance of AliasesCreateResponse class. </summary>
        /// <param name="createdTimestamp"> The created timestamp for the alias. </param>
        /// <param name="aliasId"> The id for the alias. </param>
        /// <param name="creatorDataItemId"> The id for the creator data item that this alias references (could be null if the alias has not been assigned). </param>
        /// <param name="lastUpdatedTimestamp"> The timestamp of the last time the alias was assigned. </param>
        /// <returns> A new <see cref="Models.AliasesCreateResponse"/> instance for mocking. </returns>
        public static AliasesCreateResponse AliasesCreateResponse(string createdTimestamp = default, string aliasId = default, string creatorDataItemId = default, string lastUpdatedTimestamp = default)
        {
            return new AliasesCreateResponse(createdTimestamp, aliasId, creatorDataItemId, lastUpdatedTimestamp);
        }

        /// <summary> Initializes new instance of ErrorDetail class. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <param name="target"> The error target. </param>
        /// <param name="details"> The error details. </param>
        /// <param name="additionalInfo"> The error additional info. </param>
        /// <returns> A new <see cref="Models.ErrorDetail"/> instance for mocking. </returns>
        public static ErrorDetail ErrorDetail(string code = default, string message = default, string target = default, IReadOnlyList<ErrorDetail> details = default, IReadOnlyList<ErrorAdditionalInfo> additionalInfo = default)
        {
            details ??= new List<ErrorDetail>();
            additionalInfo ??= new List<ErrorAdditionalInfo>();
            return new ErrorDetail(code, message, target, details, additionalInfo);
        }

        /// <summary> Initializes new instance of ErrorAdditionalInfo class. </summary>
        /// <param name="type"> The additional info type. </param>
        /// <param name="info"> The additional info. </param>
        /// <returns> A new <see cref="Models.ErrorAdditionalInfo"/> instance for mocking. </returns>
        public static ErrorAdditionalInfo ErrorAdditionalInfo(string type = default, object info = default)
        {
            return new ErrorAdditionalInfo(type, info);
        }

        /// <summary> Initializes new instance of AliasListItem class. </summary>
        /// <param name="createdTimestamp"> The created timestamp for the alias. </param>
        /// <param name="aliasId"> The id for the alias. </param>
        /// <param name="creatorDataItemId"> The id for the creator data item that this alias references (could be null if the alias has not been assigned). </param>
        /// <param name="lastUpdatedTimestamp"> The timestamp of the last time the alias was assigned. </param>
        /// <returns> A new <see cref="Models.AliasListItem"/> instance for mocking. </returns>
        public static AliasListItem AliasListItem(string createdTimestamp = default, string aliasId = default, string creatorDataItemId = default, string lastUpdatedTimestamp = default)
        {
            return new AliasListItem(createdTimestamp, aliasId, creatorDataItemId, lastUpdatedTimestamp);
        }

        /// <summary> Initializes new instance of LongRunningOperationResult class. </summary>
        /// <param name="operationId"> The Id for this long-running operation. </param>
        /// <param name="status"> The status state of the request. </param>
        /// <param name="created"> The created timestamp. </param>
        /// <param name="error"> The error detail. </param>
        /// <param name="warning"> The error detail. </param>
        /// <returns> A new <see cref="Models.LongRunningOperationResult"/> instance for mocking. </returns>
        public static LongRunningOperationResult LongRunningOperationResult(string operationId = default, LroStatus? status = default, string created = default, ErrorDetail error = default, ErrorDetail warning = default)
        {
            return new LongRunningOperationResult(operationId, status, created, error, warning);
        }

        /// <summary> Initializes new instance of MapDataListResponse class. </summary>
        /// <param name="mapDataList"> A list of all the previously uploaded data. </param>
        /// <returns> A new <see cref="Models.MapDataListResponse"/> instance for mocking. </returns>
        public static MapDataListResponse MapDataListResponse(IReadOnlyList<MapDataDetailInfo> mapDataList = default)
        {
            mapDataList ??= new List<MapDataDetailInfo>();
            return new MapDataListResponse(mapDataList);
        }

        /// <summary> Initializes new instance of MapDataDetailInfo class. </summary>
        /// <param name="udid"> The unique data id for the data. </param>
        /// <param name="location"> The location of the data. Execute a HTTP `GET` on this location to download the data. </param>
        /// <param name="sizeInBytes"> The size of the content in bytes. </param>
        /// <param name="uploadStatus"> The current upload status of the content. </param>
        /// <param name="dataFormat"> The current data format. </param>
        /// <param name="description"> The current description. </param>
        /// <returns> A new <see cref="Models.MapDataDetailInfo"/> instance for mocking. </returns>
        public static MapDataDetailInfo MapDataDetailInfo(string udid = default, string location = default, long? sizeInBytes = default, string uploadStatus = default, string dataFormat = default, string description = default)
        {
            return new MapDataDetailInfo(udid, location, sizeInBytes, uploadStatus, dataFormat, description);
        }

        /// <summary> Initializes new instance of DatasetDetailInfo class. </summary>
        /// <param name="created"> The created timestamp for the dataset. </param>
        /// <param name="datasetId"> The id for the dataset. </param>
        /// <param name="ontology"> The ontology version of this dataset. </param>
        /// <param name="description"> The description for the dataset. </param>
        /// <param name="datasetSources"> Information about the details of the create request for the dataset. </param>
        /// <param name="featureCounts"> The feature counts for the dataset. </param>
        /// <returns> A new <see cref="Models.DatasetDetailInfo"/> instance for mocking. </returns>
        public static DatasetDetailInfo DatasetDetailInfo(string created = default, string datasetId = default, string ontology = default, string description = default, DatasetSources datasetSources = default, object featureCounts = default)
        {
            return new DatasetDetailInfo(created, datasetId, ontology, description, datasetSources, featureCounts);
        }

        /// <summary> Initializes new instance of DatasetSources class. </summary>
        /// <param name="conversionIds"> The list of `conversionId` that were used to create the dataset. </param>
        /// <param name="appendDatasetId"> The dataset that was appended to to create the current dataset. </param>
        /// <returns> A new <see cref="Models.DatasetSources"/> instance for mocking. </returns>
        public static DatasetSources DatasetSources(IReadOnlyList<string> conversionIds = default, string appendDatasetId = default)
        {
            conversionIds ??= new List<string>();
            return new DatasetSources(conversionIds, appendDatasetId);
        }

        /// <summary> Initializes new instance of ConversionListDetailInfo class. </summary>
        /// <param name="conversionId"> A unique id that represents the artifact of a _successfully_ completed conversion process. </param>
        /// <param name="ontology"> The ontology version of this dataset. </param>
        /// <param name="udid"> The unique id of the content provided to create this conversion. </param>
        /// <param name="created"> The date and time of this conversion. </param>
        /// <param name="description"> User provided description of the content being converted. </param>
        /// <param name="featureCounts"> A summary of feature counts in this conversion. </param>
        /// <returns> A new <see cref="Models.ConversionListDetailInfo"/> instance for mocking. </returns>
        public static ConversionListDetailInfo ConversionListDetailInfo(string conversionId = default, string ontology = default, string udid = default, string created = default, string description = default, object featureCounts = default)
        {
            return new ConversionListDetailInfo(conversionId, ontology, udid, created, description, featureCounts);
        }

        /// <summary> Initializes new instance of StatesetCreatedResponse class. </summary>
        /// <param name="statesetId"> The ID for the new stateset created. </param>
        /// <returns> A new <see cref="Models.StatesetCreatedResponse"/> instance for mocking. </returns>
        public static StatesetCreatedResponse StatesetCreatedResponse(string statesetId = default)
        {
            return new StatesetCreatedResponse(statesetId);
        }

        /// <summary> Initializes new instance of StatesetInfoObject class. </summary>
        /// <param name="statesetId"> The stateset ID of this stateset. </param>
        /// <param name="description"> Description associated with the stateset. </param>
        /// <param name="datasetIds"> Dataset ID associated with the stateset. </param>
        /// <param name="statesetStyle"> The styles model. </param>
        /// <returns> A new <see cref="Models.StatesetInfoObject"/> instance for mocking. </returns>
        public static StatesetInfoObject StatesetInfoObject(string statesetId = default, string description = default, IReadOnlyList<string> datasetIds = default, StylesObject statesetStyle = default)
        {
            datasetIds ??= new List<string>();
            return new StatesetInfoObject(statesetId, description, datasetIds, statesetStyle);
        }

        /// <summary> Initializes new instance of StatesetGetResponse class. </summary>
        /// <param name="description"> Description associated with the stateset. </param>
        /// <param name="datasetIds"> Dataset ID associated with the stateset. </param>
        /// <param name="statesetStyle"> The styles model. </param>
        /// <returns> A new <see cref="Models.StatesetGetResponse"/> instance for mocking. </returns>
        public static StatesetGetResponse StatesetGetResponse(string description = default, IReadOnlyList<string> datasetIds = default, StylesObject statesetStyle = default)
        {
            datasetIds ??= new List<string>();
            return new StatesetGetResponse(description, datasetIds, statesetStyle);
        }

        /// <summary> Initializes new instance of GeofenceResponse class. </summary>
        /// <param name="geometries"> Lists the fence geometries that contain the coordinate position or overlap the searchBuffer around the position. </param>
        /// <param name="expiredGeofenceGeometryId"> Lists of the geometry ID of the geofence which is expired relative to the user time in the request. </param>
        /// <param name="invalidPeriodGeofenceGeometryId"> Lists of the geometry ID of the geofence which is in invalid period relative to the user time in the request. </param>
        /// <param name="isEventPublished"> True if at least one event is published to the Azure Maps event subscriber, false if no event is published to the Azure Maps event subscriber. This will only be presented in response when &apos;isAsync&apos; query parameter is set to true. </param>
        /// <returns> A new <see cref="Models.GeofenceResponse"/> instance for mocking. </returns>
        public static GeofenceResponse GeofenceResponse(IReadOnlyList<GeofenceGeometry> geometries = default, IReadOnlyList<string> expiredGeofenceGeometryId = default, IReadOnlyList<string> invalidPeriodGeofenceGeometryId = default, bool? isEventPublished = default)
        {
            geometries ??= new List<GeofenceGeometry>();
            expiredGeofenceGeometryId ??= new List<string>();
            invalidPeriodGeofenceGeometryId ??= new List<string>();
            return new GeofenceResponse(geometries, expiredGeofenceGeometryId, invalidPeriodGeofenceGeometryId, isEventPublished);
        }

        /// <summary> Initializes new instance of GeofenceGeometry class. </summary>
        /// <param name="deviceId"> ID of the device. </param>
        /// <param name="udId"> The unique id returned from [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) after uploading a valid GeoJSON FeatureCollection object. Please refer to  [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details. All the feature&apos;s properties should  contain `geometryId`, which is used for identifying the geometry and is case-sensitive. </param>
        /// <param name="geometryId"> The unique id identifies a geometry. </param>
        /// <param name="distance"> Distance from the coordinate to the closest border of the geofence. Positive means the  coordinate is outside of the geofence. If the coordinate is outside of the geofence, but more than the value of searchBuffer away from the closest geofence border, then the value is 999. Negative means the coordinate is inside of the geofence. If the coordinate is inside the polygon, but more than the value of searchBuffer away from the closest geofencing border, then the value is -999. A value of 999 means that there is great confidence the coordinate is well outside the geofence. A value of -999 means that there is great confidence the coordinate is well within the geofence. </param>
        /// <param name="nearestLat"> Latitude of the nearest point of the geometry. </param>
        /// <param name="nearestLon"> Longitude of the nearest point of the geometry. </param>
        /// <param name="nearestZ"> Sea level in meter of the nearest point on the 2D extrusion geometry. This will only be presented in response when value is provided for &apos;zInMeter&apos; in the request. </param>
        /// <returns> A new <see cref="Models.GeofenceGeometry"/> instance for mocking. </returns>
        public static GeofenceGeometry GeofenceGeometry(string deviceId = default, string udId = default, string geometryId = default, float? distance = default, float? nearestLat = default, float? nearestLon = default, float? nearestZ = default)
        {
            return new GeofenceGeometry(deviceId, udId, geometryId, distance, nearestLat, nearestLon, nearestZ);
        }

        /// <summary> Initializes new instance of BufferResponse class. </summary>
        /// <param name="summary"> Summary of the call. </param>
        /// <param name="result"> The FeatureCollection of buffers for the input. </param>
        /// <returns> A new <see cref="Models.BufferResponse"/> instance for mocking. </returns>
        public static BufferResponse BufferResponse(BufferResponseSummary summary = default, GeoJsonFeatureCollection result = default)
        {
            return new BufferResponse(summary, result);
        }

        /// <summary> Initializes new instance of BufferResponseSummary class. </summary>
        /// <param name="udid"> The udid for the user data if one exists. </param>
        /// <param name="information"> The information about what happened during the call. </param>
        /// <returns> A new <see cref="Models.BufferResponseSummary"/> instance for mocking. </returns>
        public static BufferResponseSummary BufferResponseSummary(string udid = default, string information = default)
        {
            return new BufferResponseSummary(udid, information);
        }

        /// <summary> Initializes new instance of ClosestPointResponse class. </summary>
        /// <param name="summary"> Closest Point Summary object. </param>
        /// <param name="result"> Closest Point Result Array. </param>
        /// <returns> A new <see cref="Models.ClosestPointResponse"/> instance for mocking. </returns>
        public static ClosestPointResponse ClosestPointResponse(ClosestPointSummary summary = default, IReadOnlyList<ClosestPointResultEntry> result = default)
        {
            result ??= new List<ClosestPointResultEntry>();
            return new ClosestPointResponse(summary, result);
        }

        /// <summary> Initializes new instance of ClosestPointSummary class. </summary>
        /// <param name="sourcePoint"> A location represented as a latitude and longitude. </param>
        /// <param name="udid"> A unique data id (udid) for the uploaded content. </param>
        /// <param name="information"> Processing information. </param>
        /// <returns> A new <see cref="Models.ClosestPointSummary"/> instance for mocking. </returns>
        public static ClosestPointSummary ClosestPointSummary(SpatialCoordinate sourcePoint = default, string udid = default, string information = default)
        {
            return new ClosestPointSummary(sourcePoint, udid, information);
        }

        /// <summary> Initializes new instance of SpatialCoordinate class. </summary>
        /// <param name="lat"> Latitude property. </param>
        /// <param name="lon"> Longitude property. </param>
        /// <returns> A new <see cref="Models.SpatialCoordinate"/> instance for mocking. </returns>
        public static SpatialCoordinate SpatialCoordinate(double? lat = default, double? lon = default)
        {
            return new SpatialCoordinate(lat, lon);
        }

        /// <summary> Initializes new instance of ClosestPointResultEntry class. </summary>
        /// <param name="distanceInMeters"> The distance in meters from the source point to the closest point. </param>
        /// <param name="position"> A location represented as a latitude and longitude. </param>
        /// <param name="geometryId"> The unique id identifies a geometry. </param>
        /// <returns> A new <see cref="Models.ClosestPointResultEntry"/> instance for mocking. </returns>
        public static ClosestPointResultEntry ClosestPointResultEntry(float? distanceInMeters = default, SpatialCoordinate position = default, string geometryId = default)
        {
            return new ClosestPointResultEntry(distanceInMeters, position, geometryId);
        }

        /// <summary> Initializes new instance of PointInPolygonResponse class. </summary>
        /// <param name="summary"> Point In Polygon Summary object. </param>
        /// <param name="result"> Point In Polygon Result Object. </param>
        /// <returns> A new <see cref="Models.PointInPolygonResponse"/> instance for mocking. </returns>
        public static PointInPolygonResponse PointInPolygonResponse(PointInPolygonSummary summary = default, PointInPolygonResult result = default)
        {
            return new PointInPolygonResponse(summary, result);
        }

        /// <summary> Initializes new instance of PointInPolygonSummary class. </summary>
        /// <param name="sourcePoint"> A location represented as a latitude and longitude. </param>
        /// <param name="udid"> A unique data id (udid) for the uploaded content. Udid is not applicable for POST spatial operations(set to null). </param>
        /// <param name="information"> Processing information. </param>
        /// <returns> A new <see cref="Models.PointInPolygonSummary"/> instance for mocking. </returns>
        public static PointInPolygonSummary PointInPolygonSummary(SpatialCoordinate sourcePoint = default, string udid = default, string information = default)
        {
            return new PointInPolygonSummary(sourcePoint, udid, information);
        }

        /// <summary> Initializes new instance of PointInPolygonResult class. </summary>
        /// <param name="pointInPolygons"> Point In Polygons Property. </param>
        /// <param name="intersectingGeometries"> Geometries array. </param>
        /// <returns> A new <see cref="Models.PointInPolygonResult"/> instance for mocking. </returns>
        public static PointInPolygonResult PointInPolygonResult(bool? pointInPolygons = default, IReadOnlyList<string> intersectingGeometries = default)
        {
            intersectingGeometries ??= new List<string>();
            return new PointInPolygonResult(pointInPolygons, intersectingGeometries);
        }

        /// <summary> Initializes new instance of GreatCircleDistanceResponse class. </summary>
        /// <param name="summary"> Summary object. </param>
        /// <param name="result"> Result Object. </param>
        /// <returns> A new <see cref="Models.GreatCircleDistanceResponse"/> instance for mocking. </returns>
        public static GreatCircleDistanceResponse GreatCircleDistanceResponse(GreatCircleDistanceResponseSummary summary = default, GreatCircleDistanceResponseResult result = default)
        {
            return new GreatCircleDistanceResponse(summary, result);
        }

        /// <summary> Initializes new instance of GreatCircleDistanceResponseSummary class. </summary>
        /// <param name="sourcePoint"> A location represented as a latitude and longitude. </param>
        /// <param name="targetPoint"> A location represented as a latitude and longitude. </param>
        /// <returns> A new <see cref="Models.GreatCircleDistanceResponseSummary"/> instance for mocking. </returns>
        public static GreatCircleDistanceResponseSummary GreatCircleDistanceResponseSummary(SpatialCoordinate sourcePoint = default, SpatialCoordinate targetPoint = default)
        {
            return new GreatCircleDistanceResponseSummary(sourcePoint, targetPoint);
        }

        /// <summary> Initializes new instance of GreatCircleDistanceResponseResult class. </summary>
        /// <param name="distanceInMeters"> The great circle distance in meters from the source point to the target point. </param>
        /// <returns> A new <see cref="Models.GreatCircleDistanceResponseResult"/> instance for mocking. </returns>
        public static GreatCircleDistanceResponseResult GreatCircleDistanceResponseResult(float? distanceInMeters = default)
        {
            return new GreatCircleDistanceResponseResult(distanceInMeters);
        }

        /// <summary> Initializes new instance of TilesetDetailInfo class. </summary>
        /// <param name="tilesetId"> The unique tileset id for the tileset. </param>
        /// <param name="ontology"> The ontology version of this dataset. </param>
        /// <param name="datasetId"> The unique dataset Id used to create the tileset. </param>
        /// <param name="description"> The description the caller provided when creating the tileset. Maximum length 1024 characters. </param>
        /// <param name="minZoom"> The lowest tile zoom level tile generated for the tileset. </param>
        /// <param name="maxZoom"> The highest tile zoom level tile generated for the tileset. </param>
        /// <param name="bbox"> Bounding box which all features of the tileset lay within. Projection used - EPSG:3857. Format : &apos;minLon, minLat, maxLon, maxLat&apos;. </param>
        /// <returns> A new <see cref="Models.TilesetDetailInfo"/> instance for mocking. </returns>
        public static TilesetDetailInfo TilesetDetailInfo(string tilesetId = default, string ontology = default, string datasetId = default, string description = default, int? minZoom = default, int? maxZoom = default, IReadOnlyList<float> bbox = default)
        {
            bbox ??= new List<float>();
            return new TilesetDetailInfo(tilesetId, ontology, datasetId, description, minZoom, maxZoom, bbox);
        }

        /// <summary> Initializes new instance of LandingPageResponse class. </summary>
        /// <param name="ontology"> The ontology version of this dataset. </param>
        /// <param name="links"> Links to other WFS endpoints. </param>
        /// <returns> A new <see cref="Models.LandingPageResponse"/> instance for mocking. </returns>
        public static LandingPageResponse LandingPageResponse(string ontology = default, IReadOnlyList<WfsEndpointLink> links = default)
        {
            links ??= new List<WfsEndpointLink>();
            return new LandingPageResponse(ontology, links);
        }

        /// <summary> Initializes new instance of ConformanceResponse class. </summary>
        /// <param name="conformsTo"> List of requirements classes that the server conforms to. </param>
        /// <returns> A new <see cref="Models.ConformanceResponse"/> instance for mocking. </returns>
        public static ConformanceResponse ConformanceResponse(IReadOnlyList<string> conformsTo = default)
        {
            conformsTo ??= new List<string>();
            return new ConformanceResponse(conformsTo);
        }

        /// <summary> Initializes new instance of CollectionsResponse class. </summary>
        /// <param name="ontology"> The ontology version of this dataset. </param>
        /// <param name="links"> Links to other WFS endpoints. </param>
        /// <param name="collections"> All the collections in a given dataset. </param>
        /// <returns> A new <see cref="Models.CollectionsResponse"/> instance for mocking. </returns>
        public static CollectionsResponse CollectionsResponse(string ontology = default, IReadOnlyList<WfsEndpointLink> links = default, IReadOnlyList<CollectionInfo> collections = default)
        {
            links ??= new List<WfsEndpointLink>();
            collections ??= new List<CollectionInfo>();
            return new CollectionsResponse(ontology, links, collections);
        }

        /// <summary> Initializes new instance of CollectionInfo class. </summary>
        /// <param name="name"> identifier of the collection used, for example, in URIs. </param>
        /// <param name="title"> human readable title of the collection. </param>
        /// <param name="ontology"> The ontology version of this dataset. </param>
        /// <param name="description"> a description of the features in the collection. </param>
        /// <param name="links"> Links to other WFS endpoints. </param>
        /// <returns> A new <see cref="Models.CollectionInfo"/> instance for mocking. </returns>
        public static CollectionInfo CollectionInfo(string name = default, string title = default, string ontology = default, string description = default, IReadOnlyList<WfsEndpointLink> links = default)
        {
            links ??= new List<WfsEndpointLink>();
            return new CollectionInfo(name, title, ontology, description, links);
        }

        /// <summary> Initializes new instance of CollectionDefinitionResponse class. </summary>
        /// <param name="description"> describes the collection. </param>
        /// <param name="idPrefix"> prefix of the collection used. </param>
        /// <param name="name"> identifier of the collection used, for example, in URIs. </param>
        /// <param name="title"> title of collection. </param>
        /// <param name="ontology"> The ontology version of this dataset. </param>
        /// <param name="geometryType"> type of geometry returned. </param>
        /// <param name="featureTypes"> type of features returned. </param>
        /// <param name="properties"> attributes of the collection used. </param>
        /// <param name="links"> Links to other WFS endpoints. </param>
        /// <returns> A new <see cref="Models.CollectionDefinitionResponse"/> instance for mocking. </returns>
        public static CollectionDefinitionResponse CollectionDefinitionResponse(string description = default, string idPrefix = default, string name = default, string title = default, string ontology = default, GeoJsonGeometryType geometryType = default, IReadOnlyList<string> featureTypes = default, IReadOnlyList<DefinitionProperties> properties = default, IReadOnlyList<WfsEndpointLink> links = default)
        {
            featureTypes ??= new List<string>();
            properties ??= new List<DefinitionProperties>();
            links ??= new List<WfsEndpointLink>();
            return new CollectionDefinitionResponse(description, idPrefix, name, title, ontology, geometryType, featureTypes, properties, links);
        }

        /// <summary> Initializes new instance of DefinitionProperties class. </summary>
        /// <param name="name"> name of attribute. </param>
        /// <param name="required"> is attribute required. </param>
        /// <param name="type"> type of attribute. </param>
        /// <returns> A new <see cref="Models.DefinitionProperties"/> instance for mocking. </returns>
        public static DefinitionProperties DefinitionProperties(string name = default, bool required = default, object type = default)
        {
            return new DefinitionProperties(name, required, type);
        }

        /// <summary> Initializes new instance of ExtendedGeoJsonFeatureCollectionData class. </summary>
        /// <param name="ontology"> The ontology version of this dataset. </param>
        /// <param name="numberReturned"> Number of returned features. </param>
        /// <param name="links"> Links to other WFS endpoints. </param>
        /// <returns> A new <see cref="Models.ExtendedGeoJsonFeatureCollectionData"/> instance for mocking. </returns>
        public static ExtendedGeoJsonFeatureCollectionData ExtendedGeoJsonFeatureCollectionData(string ontology = default, int? numberReturned = default, IList<WfsEndpointLink> links = default)
        {
            links ??= new List<WfsEndpointLink>();
            return new ExtendedGeoJsonFeatureCollectionData(ontology, numberReturned, links);
        }

        /// <summary> Initializes new instance of ExtendedGeoJsonFeatureCollection class. </summary>
        /// <param name="type"> Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection. </param>
        /// <param name="features"> Contains a list of valid `GeoJSON Feature` objects. </param>
        /// <param name="ontology"> The ontology version of this dataset. </param>
        /// <param name="numberReturned"> Number of returned features. </param>
        /// <param name="links"> Links to other WFS endpoints. </param>
        /// <returns> A new <see cref="Models.ExtendedGeoJsonFeatureCollection"/> instance for mocking. </returns>
        public static ExtendedGeoJsonFeatureCollection ExtendedGeoJsonFeatureCollection(GeoJsonObjectType type = default, IList<GeoJsonFeature> features = default, string ontology = default, int? numberReturned = default, IList<WfsEndpointLink> links = default)
        {
            features ??= new List<GeoJsonFeature>();
            links ??= new List<WfsEndpointLink>();
            return new ExtendedGeoJsonFeatureCollection(type, features, ontology, numberReturned, links);
        }

        /// <summary> Initializes new instance of FeatureResponse class. </summary>
        /// <param name="ontology"> The ontology version of this dataset. </param>
        /// <param name="feature"> A valid `GeoJSON Feature` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.2) for details. </param>
        /// <param name="links"> Links to other WFS endpoints. </param>
        /// <returns> A new <see cref="Models.FeatureResponse"/> instance for mocking. </returns>
        public static FeatureResponse FeatureResponse(string ontology = default, GeoJsonFeature feature = default, IReadOnlyList<WfsEndpointLink> links = default)
        {
            links ??= new List<WfsEndpointLink>();
            return new FeatureResponse(ontology, feature, links);
        }
    }
}
