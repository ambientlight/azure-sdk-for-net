// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Maps.Elevation.Models;

namespace Azure.Maps.Elevation
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class ElevationModelFactory
    {
        /// <summary> Initializes new instance of PointsResult class. </summary>
        /// <param name="data"> The response for point/points elevation API. The result will be in same sequence of points listed in request. </param>
        /// <returns> A new <see cref="Models.PointsResult"/> instance for mocking. </returns>
        public static PointsResult PointsResult(IReadOnlyList<PointElevationResult> data = default)
        {
            data ??= new List<PointElevationResult>();
            return new PointsResult(data);
        }

        /// <summary> Initializes new instance of PointElevationResult class. </summary>
        /// <param name="coordinate"> A location represented as a latitude and longitude. </param>
        /// <param name="elevationInMeter"> The elevation value in meters. </param>
        /// <returns> A new <see cref="Models.PointElevationResult"/> instance for mocking. </returns>
        public static PointElevationResult PointElevationResult(CoordinatesPair coordinate = default, float? elevationInMeter = default)
        {
            return new PointElevationResult(coordinate, elevationInMeter);
        }

        /// <summary> Initializes new instance of CoordinatesPair class. </summary>
        /// <param name="latitude"> Latitude property. </param>
        /// <param name="longitude"> Longitude property. </param>
        /// <returns> A new <see cref="Models.CoordinatesPair"/> instance for mocking. </returns>
        public static CoordinatesPair CoordinatesPair(double? latitude = default, double? longitude = default)
        {
            return new CoordinatesPair(latitude, longitude);
        }

        /// <summary> Initializes new instance of LinesResult class. </summary>
        /// <param name="data"> The response from the Get Data for Polyline API. The results will be listed in the direction from the first endpoint towards the last endpoint. </param>
        /// <returns> A new <see cref="Models.LinesResult"/> instance for mocking. </returns>
        public static LinesResult LinesResult(IReadOnlyList<PointElevationResult> data = default)
        {
            data ??= new List<PointElevationResult>();
            return new LinesResult(data);
        }

        /// <summary> Initializes new instance of BoundingBoxResult class. </summary>
        /// <param name="data"> The response from the Get Data for Bounding Box API. The results are ordered starting with the southwest corner, and then proceed west to east and south to north. </param>
        /// <returns> A new <see cref="Models.BoundingBoxResult"/> instance for mocking. </returns>
        public static BoundingBoxResult BoundingBoxResult(IReadOnlyList<PointElevationResult> data = default)
        {
            data ??= new List<PointElevationResult>();
            return new BoundingBoxResult(data);
        }
    }
}
