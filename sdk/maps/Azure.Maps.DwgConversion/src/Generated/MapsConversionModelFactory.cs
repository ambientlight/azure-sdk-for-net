// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Maps.DwgConversion.Models;

namespace Azure.Maps.DwgConversion
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class MapsConversionModelFactory
    {
        /// <summary> Initializes new instance of LongRunningOperationResult class. </summary>
        /// <param name="operationId"> The Id for this long-running operation. </param>
        /// <param name="status"> The status state of the request. </param>
        /// <param name="created"> The created timestamp. </param>
        /// <param name="resourceLocation"> The location URI for details about the created resource. This is only provided when the request was successfully completed. </param>
        /// <param name="error"> The error detail. </param>
        /// <param name="warning"> The error detail. </param>
        /// <returns> A new <see cref="Models.LongRunningOperationResult"/> instance for mocking. </returns>
        public static LongRunningOperationResult LongRunningOperationResult(string operationId = default, LroStatus? status = default, string created = default, string resourceLocation = default, ErrorDetail error = default, ErrorDetail warning = default)
        {
            return new LongRunningOperationResult(operationId, status, created, resourceLocation, error, warning);
        }

        /// <summary> Initializes new instance of ErrorDetail class. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <param name="target"> The error target. </param>
        /// <param name="details"> The error details. </param>
        /// <param name="additionalInfo"> The error additional info. </param>
        /// <returns> A new <see cref="Models.ErrorDetail"/> instance for mocking. </returns>
        public static ErrorDetail ErrorDetail(string code = default, string message = default, string target = default, IReadOnlyList<ErrorDetail> details = default, IReadOnlyList<ErrorAdditionalInfo> additionalInfo = default)
        {
            details ??= new List<ErrorDetail>();
            additionalInfo ??= new List<ErrorAdditionalInfo>();
            return new ErrorDetail(code, message, target, details, additionalInfo);
        }

        /// <summary> Initializes new instance of ErrorAdditionalInfo class. </summary>
        /// <param name="type"> The additional info type. </param>
        /// <param name="info"> The additional info. </param>
        /// <returns> A new <see cref="Models.ErrorAdditionalInfo"/> instance for mocking. </returns>
        public static ErrorAdditionalInfo ErrorAdditionalInfo(string type = default, object info = default)
        {
            return new ErrorAdditionalInfo(type, info);
        }

        /// <summary> Initializes new instance of ConversionListDetailInfo class. </summary>
        /// <param name="conversionId"> A unique id that represents the artifact of a _successfully_ completed conversion process. </param>
        /// <param name="ontology"> The ontology version of this dataset. </param>
        /// <param name="udid"> The unique id of the content provided to create this conversion. </param>
        /// <param name="created"> The date and time of this conversion. </param>
        /// <param name="description"> User provided description of the content being converted. </param>
        /// <param name="featureCounts"> A summary of feature counts in this conversion. </param>
        /// <returns> A new <see cref="Models.ConversionListDetailInfo"/> instance for mocking. </returns>
        public static ConversionListDetailInfo ConversionListDetailInfo(string conversionId = default, string ontology = default, string udid = default, string created = default, string description = default, object featureCounts = default)
        {
            return new ConversionListDetailInfo(conversionId, ontology, udid, created, description, featureCounts);
        }
    }
}
