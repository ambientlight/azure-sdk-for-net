// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Maps.Spatial.Models;

namespace Azure.Maps.Spatial
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class MapsSpatialModelFactory
    {
        /// <summary> Initializes new instance of GeofenceResponse class. </summary>
        /// <param name="geometries"> Lists the fence geometries that contain the coordinate position or overlap the searchBuffer around the position. </param>
        /// <param name="expiredGeofenceGeometryId"> Lists of the geometry ID of the geofence which is expired relative to the user time in the request. </param>
        /// <param name="invalidPeriodGeofenceGeometryId"> Lists of the geometry ID of the geofence which is in invalid period relative to the user time in the request. </param>
        /// <param name="isEventPublished"> True if at least one event is published to the Azure Maps event subscriber, false if no event is published to the Azure Maps event subscriber. This will only be presented in response when &apos;isAsync&apos; query parameter is set to true. </param>
        /// <returns> A new <see cref="Models.GeofenceResponse"/> instance for mocking. </returns>
        public static GeofenceResponse GeofenceResponse(IReadOnlyList<GeofenceGeometry> geometries = default, IReadOnlyList<string> expiredGeofenceGeometryId = default, IReadOnlyList<string> invalidPeriodGeofenceGeometryId = default, bool? isEventPublished = default)
        {
            geometries ??= new List<GeofenceGeometry>();
            expiredGeofenceGeometryId ??= new List<string>();
            invalidPeriodGeofenceGeometryId ??= new List<string>();
            return new GeofenceResponse(geometries, expiredGeofenceGeometryId, invalidPeriodGeofenceGeometryId, isEventPublished);
        }

        /// <summary> Initializes new instance of GeofenceGeometry class. </summary>
        /// <param name="deviceId"> ID of the device. </param>
        /// <param name="udId"> The unique id returned from [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) after uploading a valid GeoJSON FeatureCollection object. Please refer to  [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details. All the feature&apos;s properties should  contain `geometryId`, which is used for identifying the geometry and is case-sensitive. </param>
        /// <param name="geometryId"> The unique id identifies a geometry. </param>
        /// <param name="distance"> Distance from the coordinate to the closest border of the geofence. Positive means the  coordinate is outside of the geofence. If the coordinate is outside of the geofence, but more than the value of searchBuffer away from the closest geofence border, then the value is 999. Negative means the coordinate is inside of the geofence. If the coordinate is inside the polygon, but more than the value of searchBuffer away from the closest geofencing border, then the value is -999. A value of 999 means that there is great confidence the coordinate is well outside the geofence. A value of -999 means that there is great confidence the coordinate is well within the geofence. </param>
        /// <param name="nearestLat"> Latitude of the nearest point of the geometry. </param>
        /// <param name="nearestLon"> Longitude of the nearest point of the geometry. </param>
        /// <param name="nearestZ"> Sea level in meter of the nearest point on the 2D extrusion geometry. This will only be presented in response when value is provided for &apos;zInMeter&apos; in the request. </param>
        /// <returns> A new <see cref="Models.GeofenceGeometry"/> instance for mocking. </returns>
        public static GeofenceGeometry GeofenceGeometry(string deviceId = default, string udId = default, string geometryId = default, float? distance = default, float? nearestLat = default, float? nearestLon = default, float? nearestZ = default)
        {
            return new GeofenceGeometry(deviceId, udId, geometryId, distance, nearestLat, nearestLon, nearestZ);
        }

        /// <summary> Initializes new instance of BufferResponse class. </summary>
        /// <param name="summary"> Summary of the call. </param>
        /// <param name="result"> The FeatureCollection of buffers for the input. </param>
        /// <returns> A new <see cref="Models.BufferResponse"/> instance for mocking. </returns>
        public static BufferResponse BufferResponse(BufferResponseSummary summary = default, GeoJsonFeatureCollection result = default)
        {
            return new BufferResponse(summary, result);
        }

        /// <summary> Initializes new instance of BufferResponseSummary class. </summary>
        /// <param name="udid"> The udid for the user data if one exists. </param>
        /// <param name="information"> The information about what happened during the call. </param>
        /// <returns> A new <see cref="Models.BufferResponseSummary"/> instance for mocking. </returns>
        public static BufferResponseSummary BufferResponseSummary(string udid = default, string information = default)
        {
            return new BufferResponseSummary(udid, information);
        }

        /// <summary> Initializes new instance of ClosestPointResponse class. </summary>
        /// <param name="summary"> Closest Point Summary object. </param>
        /// <param name="result"> Closest Point Result Array. </param>
        /// <returns> A new <see cref="Models.ClosestPointResponse"/> instance for mocking. </returns>
        public static ClosestPointResponse ClosestPointResponse(ClosestPointSummary summary = default, IReadOnlyList<ClosestPointResultEntry> result = default)
        {
            result ??= new List<ClosestPointResultEntry>();
            return new ClosestPointResponse(summary, result);
        }

        /// <summary> Initializes new instance of ClosestPointSummary class. </summary>
        /// <param name="sourcePoint"> A location represented as a latitude and longitude. </param>
        /// <param name="udid"> A unique data id (udid) for the uploaded content. </param>
        /// <param name="information"> Processing information. </param>
        /// <returns> A new <see cref="Models.ClosestPointSummary"/> instance for mocking. </returns>
        public static ClosestPointSummary ClosestPointSummary(SpatialCoordinate sourcePoint = default, string udid = default, string information = default)
        {
            return new ClosestPointSummary(sourcePoint, udid, information);
        }

        /// <summary> Initializes new instance of SpatialCoordinate class. </summary>
        /// <param name="lat"> Latitude property. </param>
        /// <param name="lon"> Longitude property. </param>
        /// <returns> A new <see cref="Models.SpatialCoordinate"/> instance for mocking. </returns>
        public static SpatialCoordinate SpatialCoordinate(double? lat = default, double? lon = default)
        {
            return new SpatialCoordinate(lat, lon);
        }

        /// <summary> Initializes new instance of ClosestPointResultEntry class. </summary>
        /// <param name="distanceInMeters"> The distance in meters from the source point to the closest point. </param>
        /// <param name="position"> A location represented as a latitude and longitude. </param>
        /// <param name="geometryId"> The unique id identifies a geometry. </param>
        /// <returns> A new <see cref="Models.ClosestPointResultEntry"/> instance for mocking. </returns>
        public static ClosestPointResultEntry ClosestPointResultEntry(float? distanceInMeters = default, SpatialCoordinate position = default, string geometryId = default)
        {
            return new ClosestPointResultEntry(distanceInMeters, position, geometryId);
        }

        /// <summary> Initializes new instance of PointInPolygonResponse class. </summary>
        /// <param name="summary"> Point In Polygon Summary object. </param>
        /// <param name="result"> Point In Polygon Result Object. </param>
        /// <returns> A new <see cref="Models.PointInPolygonResponse"/> instance for mocking. </returns>
        public static PointInPolygonResponse PointInPolygonResponse(PointInPolygonSummary summary = default, PointInPolygonResult result = default)
        {
            return new PointInPolygonResponse(summary, result);
        }

        /// <summary> Initializes new instance of PointInPolygonSummary class. </summary>
        /// <param name="sourcePoint"> A location represented as a latitude and longitude. </param>
        /// <param name="udid"> A unique data id (udid) for the uploaded content. Udid is not applicable for POST spatial operations(set to null). </param>
        /// <param name="information"> Processing information. </param>
        /// <returns> A new <see cref="Models.PointInPolygonSummary"/> instance for mocking. </returns>
        public static PointInPolygonSummary PointInPolygonSummary(SpatialCoordinate sourcePoint = default, string udid = default, string information = default)
        {
            return new PointInPolygonSummary(sourcePoint, udid, information);
        }

        /// <summary> Initializes new instance of PointInPolygonResult class. </summary>
        /// <param name="pointInPolygons"> Point In Polygons Property. </param>
        /// <param name="intersectingGeometries"> Geometries array. </param>
        /// <returns> A new <see cref="Models.PointInPolygonResult"/> instance for mocking. </returns>
        public static PointInPolygonResult PointInPolygonResult(bool? pointInPolygons = default, IReadOnlyList<string> intersectingGeometries = default)
        {
            intersectingGeometries ??= new List<string>();
            return new PointInPolygonResult(pointInPolygons, intersectingGeometries);
        }

        /// <summary> Initializes new instance of GreatCircleDistanceResponse class. </summary>
        /// <param name="summary"> Summary object. </param>
        /// <param name="result"> Result Object. </param>
        /// <returns> A new <see cref="Models.GreatCircleDistanceResponse"/> instance for mocking. </returns>
        public static GreatCircleDistanceResponse GreatCircleDistanceResponse(GreatCircleDistanceResponseSummary summary = default, GreatCircleDistanceResponseResult result = default)
        {
            return new GreatCircleDistanceResponse(summary, result);
        }

        /// <summary> Initializes new instance of GreatCircleDistanceResponseSummary class. </summary>
        /// <param name="sourcePoint"> A location represented as a latitude and longitude. </param>
        /// <param name="targetPoint"> A location represented as a latitude and longitude. </param>
        /// <returns> A new <see cref="Models.GreatCircleDistanceResponseSummary"/> instance for mocking. </returns>
        public static GreatCircleDistanceResponseSummary GreatCircleDistanceResponseSummary(SpatialCoordinate sourcePoint = default, SpatialCoordinate targetPoint = default)
        {
            return new GreatCircleDistanceResponseSummary(sourcePoint, targetPoint);
        }

        /// <summary> Initializes new instance of GreatCircleDistanceResponseResult class. </summary>
        /// <param name="distanceInMeters"> The great circle distance in meters from the source point to the target point. </param>
        /// <returns> A new <see cref="Models.GreatCircleDistanceResponseResult"/> instance for mocking. </returns>
        public static GreatCircleDistanceResponseResult GreatCircleDistanceResponseResult(float? distanceInMeters = default)
        {
            return new GreatCircleDistanceResponseResult(distanceInMeters);
        }
    }
}
