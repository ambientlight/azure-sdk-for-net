// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Maps.Timezone.Models;

namespace Azure.Maps.Timezone
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class MapsTimezoneModelFactory
    {
        /// <summary> Initializes new instance of TimezoneByIdResult class. </summary>
        /// <param name="version"> Version property. </param>
        /// <param name="referenceUtcTimestamp"> Reference Utc Timestamp property. </param>
        /// <param name="timeZones"> TimeZoneById array. </param>
        /// <returns> A new <see cref="Models.TimezoneByIdResult"/> instance for mocking. </returns>
        public static TimezoneByIdResult TimezoneByIdResult(string version = default, DateTimeOffset? referenceUtcTimestamp = default, IReadOnlyList<TimezoneById> timeZones = default)
        {
            timeZones ??= new List<TimezoneById>();
            return new TimezoneByIdResult(version, referenceUtcTimestamp, timeZones);
        }

        /// <summary> Initializes new instance of TimezoneById class. </summary>
        /// <param name="id"> Id property. </param>
        /// <param name="aliases">
        /// An array of time zone ID aliases.  Only returned when [options]=*zoneinfo* or *all*.
        /// 
        /// Note: may be null.
        /// </param>
        /// <param name="countries"> An array of country records. Only returned when [options]=*zoneinfo* or *all*. </param>
        /// <param name="names"> Timezone names object. </param>
        /// <param name="referenceTime"> Details in effect at the local time. </param>
        /// <param name="representativePoint"> Representative point property. </param>
        /// <param name="timeTransitions"> Time zone DST transitions from [transitionsFrom] until timestamp + 1 year. </param>
        /// <returns> A new <see cref="Models.TimezoneById"/> instance for mocking. </returns>
        public static TimezoneById TimezoneById(string id = default, IReadOnlyList<string> aliases = default, IReadOnlyList<CountryRecord> countries = default, TimezoneNames names = default, ReferenceTimeById referenceTime = default, RepresentativePoint representativePoint = default, IReadOnlyList<TimeTransition> timeTransitions = default)
        {
            aliases ??= new List<string>();
            countries ??= new List<CountryRecord>();
            timeTransitions ??= new List<TimeTransition>();
            return new TimezoneById(id, aliases, countries, names, referenceTime, representativePoint, timeTransitions);
        }

        /// <summary> Initializes new instance of CountryRecord class. </summary>
        /// <param name="name"> Country Name. </param>
        /// <param name="code"> ISO-3166 2-letter country code for the country. </param>
        /// <returns> A new <see cref="Models.CountryRecord"/> instance for mocking. </returns>
        public static CountryRecord CountryRecord(string name = default, string code = default)
        {
            return new CountryRecord(name, code);
        }

        /// <summary> Initializes new instance of TimezoneNames class. </summary>
        /// <param name="iSO6391LanguageCode"> The ISO 639-1 language code of the Names. </param>
        /// <param name="generic"> Generic Name. </param>
        /// <param name="standard"> Standard Name. </param>
        /// <param name="daylight"> Daylight Name. </param>
        /// <returns> A new <see cref="Models.TimezoneNames"/> instance for mocking. </returns>
        public static TimezoneNames TimezoneNames(string iSO6391LanguageCode = default, string generic = default, string standard = default, string daylight = default)
        {
            return new TimezoneNames(iSO6391LanguageCode, generic, standard, daylight);
        }

        /// <summary> Initializes new instance of ReferenceTimeById class. </summary>
        /// <param name="tag"> Time zone name in effect at the reference timestamp (i.e. PST or PDT depending whether Daylight Savings Time is in effect). </param>
        /// <param name="standardOffset"> UTC offset in effect at the `ReferenceUTCTimestamp`. </param>
        /// <param name="daylightSavings"> Time saving in minutes in effect at the `ReferenceUTCTimestamp`. </param>
        /// <param name="wallTime"> Current wall time at the given time zone as shown in the `Tag` property. </param>
        /// <param name="posixTzValidYear"> The year this POSIX string is valid for. Note: A POSIX string will only be valid in the given year. </param>
        /// <param name="posixTz"> POSIX string used to set the time zone environment variable. </param>
        /// <returns> A new <see cref="Models.ReferenceTimeById"/> instance for mocking. </returns>
        public static ReferenceTimeById ReferenceTimeById(string tag = default, string standardOffset = default, string daylightSavings = default, string wallTime = default, int? posixTzValidYear = default, string posixTz = default)
        {
            return new ReferenceTimeById(tag, standardOffset, daylightSavings, wallTime, posixTzValidYear, posixTz);
        }

        /// <summary> Initializes new instance of RepresentativePoint class. </summary>
        /// <param name="latitude"> Latitude property. </param>
        /// <param name="longitude"> Longitude property. </param>
        /// <returns> A new <see cref="Models.RepresentativePoint"/> instance for mocking. </returns>
        public static RepresentativePoint RepresentativePoint(float? latitude = default, float? longitude = default)
        {
            return new RepresentativePoint(latitude, longitude);
        }

        /// <summary> Initializes new instance of TimeTransition class. </summary>
        /// <param name="tag"> Tag property. </param>
        /// <param name="standardOffset"> StandardOffset property. </param>
        /// <param name="daylightSavings"> DaylightSavings property. </param>
        /// <param name="utcStart"> Start date, start time for this transition period. </param>
        /// <param name="utcEnd"> End date, end time for this transition period. </param>
        /// <returns> A new <see cref="Models.TimeTransition"/> instance for mocking. </returns>
        public static TimeTransition TimeTransition(string tag = default, string standardOffset = default, string daylightSavings = default, DateTimeOffset? utcStart = default, DateTimeOffset? utcEnd = default)
        {
            return new TimeTransition(tag, standardOffset, daylightSavings, utcStart, utcEnd);
        }

        /// <summary> Initializes new instance of TimezoneByCoordinatesResult class. </summary>
        /// <param name="version"> Version property. </param>
        /// <param name="referenceUtcTimestamp"> Reference Utc Timestamp property. </param>
        /// <param name="timeZones"> TimeZoneByCoordinates array. </param>
        /// <returns> A new <see cref="Models.TimezoneByCoordinatesResult"/> instance for mocking. </returns>
        public static TimezoneByCoordinatesResult TimezoneByCoordinatesResult(string version = default, DateTimeOffset? referenceUtcTimestamp = default, IReadOnlyList<TimeZoneByCoordinates> timeZones = default)
        {
            timeZones ??= new List<TimeZoneByCoordinates>();
            return new TimezoneByCoordinatesResult(version, referenceUtcTimestamp, timeZones);
        }

        /// <summary> Initializes new instance of TimeZoneByCoordinates class. </summary>
        /// <param name="id"> Id property. </param>
        /// <param name="aliases">
        /// An array of time zone ID aliases.  Only returned when [options]=*zoneinfo* or *all*.
        /// 
        /// Note: may be null.
        /// </param>
        /// <param name="countries"> An array of country records. Only returned when [options]=*zoneinfo* or *all*. </param>
        /// <param name="names"> Timezone names object. </param>
        /// <param name="referenceTime"> Details in effect at the local time. </param>
        /// <param name="representativePoint"> Representative point property. </param>
        /// <param name="timeTransitions"> Time zone DST transitions from [transitionsFrom] until timestamp + 1 year. </param>
        /// <returns> A new <see cref="Models.TimeZoneByCoordinates"/> instance for mocking. </returns>
        public static TimeZoneByCoordinates TimeZoneByCoordinates(string id = default, IReadOnlyList<string> aliases = default, IReadOnlyList<CountryRecord> countries = default, TimezoneNames names = default, ReferenceTimeByCoordinates referenceTime = default, RepresentativePoint representativePoint = default, IReadOnlyList<TimeTransition> timeTransitions = default)
        {
            aliases ??= new List<string>();
            countries ??= new List<CountryRecord>();
            timeTransitions ??= new List<TimeTransition>();
            return new TimeZoneByCoordinates(id, aliases, countries, names, referenceTime, representativePoint, timeTransitions);
        }

        /// <summary> Initializes new instance of ReferenceTimeByCoordinates class. </summary>
        /// <param name="tag"> Time zone name in effect at the reference timestamp (i.e. PST or PDT depending whether Daylight Savings Time is in effect). </param>
        /// <param name="standardOffset"> UTC offset in effect at the `ReferenceUTCTimestamp`. </param>
        /// <param name="daylightSavings"> Time saving in minutes in effect at the `ReferenceUTCTimestamp`. </param>
        /// <param name="wallTime"> Current wall time at the given time zone as shown in the `Tag` property. </param>
        /// <param name="posixTzValidYear"> The year this POSIX string is valid for. Note: A POSIX string will only be valid in the given year. </param>
        /// <param name="posixTz"> POSIX string used to set the time zone environment variable. </param>
        /// <param name="sunrise"> Sunrise at the given time zone as shown in the `Tag` property. </param>
        /// <param name="sunset"> Sunset at the given time zone as shown in the `Tag` property. </param>
        /// <returns> A new <see cref="Models.ReferenceTimeByCoordinates"/> instance for mocking. </returns>
        public static ReferenceTimeByCoordinates ReferenceTimeByCoordinates(string tag = default, string standardOffset = default, string daylightSavings = default, string wallTime = default, int? posixTzValidYear = default, string posixTz = default, string sunrise = default, string sunset = default)
        {
            return new ReferenceTimeByCoordinates(tag, standardOffset, daylightSavings, wallTime, posixTzValidYear, posixTz, sunrise, sunset);
        }

        /// <summary> Initializes new instance of TimezoneEnumWindow class. </summary>
        /// <param name="windowsId"> Windows Id property. </param>
        /// <param name="territory"> Territory property. </param>
        /// <param name="ianaIds"> IanaIds array. </param>
        /// <returns> A new <see cref="Models.TimezoneEnumWindow"/> instance for mocking. </returns>
        public static TimezoneEnumWindow TimezoneEnumWindow(string windowsId = default, string territory = default, IReadOnlyList<string> ianaIds = default)
        {
            ianaIds ??= new List<string>();
            return new TimezoneEnumWindow(windowsId, territory, ianaIds);
        }

        /// <summary> Initializes new instance of IanaId class. </summary>
        /// <param name="id"> Id property. </param>
        /// <param name="isAlias"> IsAlias property. </param>
        /// <param name="aliasOf"> AliasOf property. </param>
        /// <param name="hasZone1970Location"> HasZone1970Location property. </param>
        /// <returns> A new <see cref="Models.IanaId"/> instance for mocking. </returns>
        public static IanaId IanaId(string id = default, bool? isAlias = default, string aliasOf = default, bool? hasZone1970Location = default)
        {
            return new IanaId(id, isAlias, aliasOf, hasZone1970Location);
        }

        /// <summary> Initializes new instance of TimezoneIanaVersionResult class. </summary>
        /// <param name="version"> Version property. </param>
        /// <returns> A new <see cref="Models.TimezoneIanaVersionResult"/> instance for mocking. </returns>
        public static TimezoneIanaVersionResult TimezoneIanaVersionResult(string version = default)
        {
            return new TimezoneIanaVersionResult(version);
        }
    }
}
