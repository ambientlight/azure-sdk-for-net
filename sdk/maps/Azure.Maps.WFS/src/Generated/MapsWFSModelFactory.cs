// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Maps.WFS.Models;

namespace Azure.Maps.WFS
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class MapsWFSModelFactory
    {
        /// <summary> Initializes new instance of LandingPageResponse class. </summary>
        /// <param name="ontology"> The ontology version of this dataset. </param>
        /// <param name="links"> Links to other WFS endpoints. </param>
        /// <returns> A new <see cref="Models.LandingPageResponse"/> instance for mocking. </returns>
        public static LandingPageResponse LandingPageResponse(string ontology = default, IReadOnlyList<WfsEndpointLink> links = default)
        {
            links ??= new List<WfsEndpointLink>();
            return new LandingPageResponse(ontology, links);
        }

        /// <summary> Initializes new instance of WfsEndpointLink class. </summary>
        /// <param name="href"> The link target. </param>
        /// <param name="rel"> The relation type. </param>
        /// <param name="type"> A hint indicating what the media type of the result of dereferencing the link should be. </param>
        /// <param name="hreflang"> A hint indicating what the language of the result of dereferencing the link should be. </param>
        /// <param name="title"> Used to label the destination of a link such that it can be used as a human-readable identifier (e.g., a menu entry) in the language indicated by the Content-Language header field (if present). </param>
        /// <returns> A new <see cref="Models.WfsEndpointLink"/> instance for mocking. </returns>
        public static WfsEndpointLink WfsEndpointLink(string href = default, string rel = default, string type = default, string hreflang = default, string title = default)
        {
            return new WfsEndpointLink(href, rel, type, hreflang, title);
        }

        /// <summary> Initializes new instance of ConformanceResponse class. </summary>
        /// <param name="conformsTo"> List of requirements classes that the server conforms to. </param>
        /// <returns> A new <see cref="Models.ConformanceResponse"/> instance for mocking. </returns>
        public static ConformanceResponse ConformanceResponse(IReadOnlyList<string> conformsTo = default)
        {
            conformsTo ??= new List<string>();
            return new ConformanceResponse(conformsTo);
        }

        /// <summary> Initializes new instance of CollectionsResponse class. </summary>
        /// <param name="ontology"> The ontology version of this dataset. </param>
        /// <param name="links"> Links to other WFS endpoints. </param>
        /// <param name="collections"> All the collections in a given dataset. </param>
        /// <returns> A new <see cref="Models.CollectionsResponse"/> instance for mocking. </returns>
        public static CollectionsResponse CollectionsResponse(string ontology = default, IReadOnlyList<WfsEndpointLink> links = default, IReadOnlyList<CollectionInfo> collections = default)
        {
            links ??= new List<WfsEndpointLink>();
            collections ??= new List<CollectionInfo>();
            return new CollectionsResponse(ontology, links, collections);
        }

        /// <summary> Initializes new instance of CollectionInfo class. </summary>
        /// <param name="name"> identifier of the collection used, for example, in URIs. </param>
        /// <param name="title"> human readable title of the collection. </param>
        /// <param name="ontology"> The ontology version of this dataset. </param>
        /// <param name="description"> a description of the features in the collection. </param>
        /// <param name="links"> Links to other WFS endpoints. </param>
        /// <returns> A new <see cref="Models.CollectionInfo"/> instance for mocking. </returns>
        public static CollectionInfo CollectionInfo(string name = default, string title = default, string ontology = default, string description = default, IReadOnlyList<WfsEndpointLink> links = default)
        {
            links ??= new List<WfsEndpointLink>();
            return new CollectionInfo(name, title, ontology, description, links);
        }

        /// <summary> Initializes new instance of CollectionDefinitionResponse class. </summary>
        /// <param name="description"> describes the collection. </param>
        /// <param name="idPrefix"> prefix of the collection used. </param>
        /// <param name="name"> identifier of the collection used, for example, in URIs. </param>
        /// <param name="title"> title of collection. </param>
        /// <param name="ontology"> The ontology version of this dataset. </param>
        /// <param name="geometryType"> type of geometry returned. </param>
        /// <param name="featureTypes"> type of features returned. </param>
        /// <param name="properties"> attributes of the collection used. </param>
        /// <param name="links"> Links to other WFS endpoints. </param>
        /// <returns> A new <see cref="Models.CollectionDefinitionResponse"/> instance for mocking. </returns>
        public static CollectionDefinitionResponse CollectionDefinitionResponse(string description = default, string idPrefix = default, string name = default, string title = default, string ontology = default, GeoJsonGeometryType geometryType = default, IReadOnlyList<string> featureTypes = default, IReadOnlyList<DefinitionProperties> properties = default, IReadOnlyList<WfsEndpointLink> links = default)
        {
            featureTypes ??= new List<string>();
            properties ??= new List<DefinitionProperties>();
            links ??= new List<WfsEndpointLink>();
            return new CollectionDefinitionResponse(description, idPrefix, name, title, ontology, geometryType, featureTypes, properties, links);
        }

        /// <summary> Initializes new instance of DefinitionProperties class. </summary>
        /// <param name="name"> name of attribute. </param>
        /// <param name="required"> is attribute required. </param>
        /// <param name="type"> type of attribute. </param>
        /// <returns> A new <see cref="Models.DefinitionProperties"/> instance for mocking. </returns>
        public static DefinitionProperties DefinitionProperties(string name = default, bool required = default, object type = default)
        {
            return new DefinitionProperties(name, required, type);
        }

        /// <summary> Initializes new instance of GeoJsonFeatureCollectionData class. </summary>
        /// <param name="features"> Contains a list of valid `GeoJSON Feature` objects. </param>
        /// <returns> A new <see cref="Models.GeoJsonFeatureCollectionData"/> instance for mocking. </returns>
        public static GeoJsonFeatureCollectionData GeoJsonFeatureCollectionData(IReadOnlyList<GeoJsonFeature> features = default)
        {
            features ??= new List<GeoJsonFeature>();
            return new GeoJsonFeatureCollectionData(features);
        }

        /// <summary> Initializes new instance of GeoJsonFeatureData class. </summary>
        /// <param name="geometry"> A valid `GeoJSON` geometry object. The type must be one of the seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1) for details. </param>
        /// <param name="properties"> Properties can contain any additional metadata about the `Feature`. Value can be any JSON object or a JSON null value. </param>
        /// <param name="id"> Identifier for the feature. </param>
        /// <param name="featureType"> The type of the feature. The value depends on the data model the current feature is part of. Some data models may have an empty value. </param>
        /// <returns> A new <see cref="Models.GeoJsonFeatureData"/> instance for mocking. </returns>
        public static GeoJsonFeatureData GeoJsonFeatureData(GeoJsonGeometry geometry = default, object properties = default, string id = default, string featureType = default)
        {
            return new GeoJsonFeatureData(geometry, properties, id, featureType);
        }

        /// <summary> Initializes new instance of GeoJsonFeature class. </summary>
        /// <param name="type"> Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection. </param>
        /// <param name="geometry"> A valid `GeoJSON` geometry object. The type must be one of the seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1) for details. </param>
        /// <param name="properties"> Properties can contain any additional metadata about the `Feature`. Value can be any JSON object or a JSON null value. </param>
        /// <param name="id"> Identifier for the feature. </param>
        /// <param name="featureType"> The type of the feature. The value depends on the data model the current feature is part of. Some data models may have an empty value. </param>
        /// <returns> A new <see cref="Models.GeoJsonFeature"/> instance for mocking. </returns>
        public static GeoJsonFeature GeoJsonFeature(GeoJsonObjectType type = default, GeoJsonGeometry geometry = default, object properties = default, string id = default, string featureType = default)
        {
            return new GeoJsonFeature(type, geometry, properties, id, featureType);
        }

        /// <summary> Initializes new instance of GeoJsonFeatureCollection class. </summary>
        /// <param name="type"> Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection. </param>
        /// <param name="features"> Contains a list of valid `GeoJSON Feature` objects. </param>
        /// <returns> A new <see cref="Models.GeoJsonFeatureCollection"/> instance for mocking. </returns>
        public static GeoJsonFeatureCollection GeoJsonFeatureCollection(GeoJsonObjectType type = default, IReadOnlyList<GeoJsonFeature> features = default)
        {
            features ??= new List<GeoJsonFeature>();
            return new GeoJsonFeatureCollection(type, features);
        }

        /// <summary> Initializes new instance of ExtendedGeoJsonFeatureCollectionData class. </summary>
        /// <param name="ontology"> The ontology version of this dataset. </param>
        /// <param name="numberReturned"> Number of returned features. </param>
        /// <param name="links"> Links to other WFS endpoints. </param>
        /// <returns> A new <see cref="Models.ExtendedGeoJsonFeatureCollectionData"/> instance for mocking. </returns>
        public static ExtendedGeoJsonFeatureCollectionData ExtendedGeoJsonFeatureCollectionData(string ontology = default, int? numberReturned = default, IReadOnlyList<WfsEndpointLink> links = default)
        {
            links ??= new List<WfsEndpointLink>();
            return new ExtendedGeoJsonFeatureCollectionData(ontology, numberReturned, links);
        }

        /// <summary> Initializes new instance of ExtendedGeoJsonFeatureCollection class. </summary>
        /// <param name="type"> Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection. </param>
        /// <param name="features"> Contains a list of valid `GeoJSON Feature` objects. </param>
        /// <param name="ontology"> The ontology version of this dataset. </param>
        /// <param name="numberReturned"> Number of returned features. </param>
        /// <param name="links"> Links to other WFS endpoints. </param>
        /// <returns> A new <see cref="Models.ExtendedGeoJsonFeatureCollection"/> instance for mocking. </returns>
        public static ExtendedGeoJsonFeatureCollection ExtendedGeoJsonFeatureCollection(GeoJsonObjectType type = default, IReadOnlyList<GeoJsonFeature> features = default, string ontology = default, int? numberReturned = default, IReadOnlyList<WfsEndpointLink> links = default)
        {
            features ??= new List<GeoJsonFeature>();
            links ??= new List<WfsEndpointLink>();
            return new ExtendedGeoJsonFeatureCollection(type, features, ontology, numberReturned, links);
        }

        /// <summary> Initializes new instance of FeatureResponse class. </summary>
        /// <param name="ontology"> The ontology version of this dataset. </param>
        /// <param name="feature"> A valid `GeoJSON Feature` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.2) for details. </param>
        /// <param name="links"> Links to other WFS endpoints. </param>
        /// <returns> A new <see cref="Models.FeatureResponse"/> instance for mocking. </returns>
        public static FeatureResponse FeatureResponse(string ontology = default, GeoJsonFeature feature = default, IReadOnlyList<WfsEndpointLink> links = default)
        {
            links ??= new List<WfsEndpointLink>();
            return new FeatureResponse(ontology, feature, links);
        }

        /// <summary> Initializes new instance of GeoJsonPointData class. </summary>
        /// <param name="coordinates"> A `Position` is an array of numbers with two or more elements. The first two elements are _longitude_ and _latitude_, precisely in that order. _Altitude/Elevation_ is an optional third element. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.1) for details. </param>
        /// <returns> A new <see cref="Models.GeoJsonPointData"/> instance for mocking. </returns>
        public static GeoJsonPointData GeoJsonPointData(IReadOnlyList<double> coordinates = default)
        {
            coordinates ??= new List<double>();
            return new GeoJsonPointData(coordinates);
        }

        /// <summary> Initializes new instance of GeoJsonPoint class. </summary>
        /// <param name="type"> Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection. </param>
        /// <param name="coordinates"> A `Position` is an array of numbers with two or more elements. The first two elements are _longitude_ and _latitude_, precisely in that order. _Altitude/Elevation_ is an optional third element. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.1) for details. </param>
        /// <returns> A new <see cref="Models.GeoJsonPoint"/> instance for mocking. </returns>
        public static GeoJsonPoint GeoJsonPoint(GeoJsonObjectType type = default, IReadOnlyList<double> coordinates = default)
        {
            coordinates ??= new List<double>();
            return new GeoJsonPoint(type, coordinates);
        }

        /// <summary> Initializes new instance of GeoJsonMultiPointData class. </summary>
        /// <param name="coordinates"> Coordinates for the `GeoJson MultiPoint` geometry. </param>
        /// <returns> A new <see cref="Models.GeoJsonMultiPointData"/> instance for mocking. </returns>
        public static GeoJsonMultiPointData GeoJsonMultiPointData(IReadOnlyList<IList<double>> coordinates = default)
        {
            coordinates ??= new List<IList<double>>();
            return new GeoJsonMultiPointData(coordinates);
        }

        /// <summary> Initializes new instance of GeoJsonMultiPoint class. </summary>
        /// <param name="type"> Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection. </param>
        /// <param name="coordinates"> Coordinates for the `GeoJson MultiPoint` geometry. </param>
        /// <returns> A new <see cref="Models.GeoJsonMultiPoint"/> instance for mocking. </returns>
        public static GeoJsonMultiPoint GeoJsonMultiPoint(GeoJsonObjectType type = default, IReadOnlyList<IList<double>> coordinates = default)
        {
            coordinates ??= new List<IList<double>>();
            return new GeoJsonMultiPoint(type, coordinates);
        }

        /// <summary> Initializes new instance of GeoJsonLineStringData class. </summary>
        /// <param name="coordinates"> Coordinates for the `GeoJson LineString` geometry. </param>
        /// <returns> A new <see cref="Models.GeoJsonLineStringData"/> instance for mocking. </returns>
        public static GeoJsonLineStringData GeoJsonLineStringData(IReadOnlyList<IList<double>> coordinates = default)
        {
            coordinates ??= new List<IList<double>>();
            return new GeoJsonLineStringData(coordinates);
        }

        /// <summary> Initializes new instance of GeoJsonLineString class. </summary>
        /// <param name="type"> Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection. </param>
        /// <param name="coordinates"> Coordinates for the `GeoJson LineString` geometry. </param>
        /// <returns> A new <see cref="Models.GeoJsonLineString"/> instance for mocking. </returns>
        public static GeoJsonLineString GeoJsonLineString(GeoJsonObjectType type = default, IReadOnlyList<IList<double>> coordinates = default)
        {
            coordinates ??= new List<IList<double>>();
            return new GeoJsonLineString(type, coordinates);
        }

        /// <summary> Initializes new instance of GeoJsonMultiLineStringData class. </summary>
        /// <param name="coordinates"> Coordinates for the `GeoJson MultiLineString` geometry. </param>
        /// <returns> A new <see cref="Models.GeoJsonMultiLineStringData"/> instance for mocking. </returns>
        public static GeoJsonMultiLineStringData GeoJsonMultiLineStringData(IReadOnlyList<IList<IList<double>>> coordinates = default)
        {
            coordinates ??= new List<IList<IList<double>>>();
            return new GeoJsonMultiLineStringData(coordinates);
        }

        /// <summary> Initializes new instance of GeoJsonMultiLineString class. </summary>
        /// <param name="type"> Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection. </param>
        /// <param name="coordinates"> Coordinates for the `GeoJson MultiLineString` geometry. </param>
        /// <returns> A new <see cref="Models.GeoJsonMultiLineString"/> instance for mocking. </returns>
        public static GeoJsonMultiLineString GeoJsonMultiLineString(GeoJsonObjectType type = default, IReadOnlyList<IList<IList<double>>> coordinates = default)
        {
            coordinates ??= new List<IList<IList<double>>>();
            return new GeoJsonMultiLineString(type, coordinates);
        }

        /// <summary> Initializes new instance of GeoJsonPolygonData class. </summary>
        /// <param name="coordinates"> Coordinates for the `GeoJson Polygon` geometry type. </param>
        /// <returns> A new <see cref="Models.GeoJsonPolygonData"/> instance for mocking. </returns>
        public static GeoJsonPolygonData GeoJsonPolygonData(IReadOnlyList<IList<IList<double>>> coordinates = default)
        {
            coordinates ??= new List<IList<IList<double>>>();
            return new GeoJsonPolygonData(coordinates);
        }

        /// <summary> Initializes new instance of GeoJsonPolygon class. </summary>
        /// <param name="type"> Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection. </param>
        /// <param name="coordinates"> Coordinates for the `GeoJson Polygon` geometry type. </param>
        /// <returns> A new <see cref="Models.GeoJsonPolygon"/> instance for mocking. </returns>
        public static GeoJsonPolygon GeoJsonPolygon(GeoJsonObjectType type = default, IReadOnlyList<IList<IList<double>>> coordinates = default)
        {
            coordinates ??= new List<IList<IList<double>>>();
            return new GeoJsonPolygon(type, coordinates);
        }

        /// <summary> Initializes new instance of GeoJsonMultiPolygonData class. </summary>
        /// <param name="coordinates"> Contains a list of valid `GeoJSON Polygon` objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude). </param>
        /// <returns> A new <see cref="Models.GeoJsonMultiPolygonData"/> instance for mocking. </returns>
        public static GeoJsonMultiPolygonData GeoJsonMultiPolygonData(IReadOnlyList<IList<IList<IList<double>>>> coordinates = default)
        {
            coordinates ??= new List<IList<IList<IList<double>>>>();
            return new GeoJsonMultiPolygonData(coordinates);
        }

        /// <summary> Initializes new instance of GeoJsonMultiPolygon class. </summary>
        /// <param name="type"> Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection. </param>
        /// <param name="coordinates"> Contains a list of valid `GeoJSON Polygon` objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude). </param>
        /// <returns> A new <see cref="Models.GeoJsonMultiPolygon"/> instance for mocking. </returns>
        public static GeoJsonMultiPolygon GeoJsonMultiPolygon(GeoJsonObjectType type = default, IReadOnlyList<IList<IList<IList<double>>>> coordinates = default)
        {
            coordinates ??= new List<IList<IList<IList<double>>>>();
            return new GeoJsonMultiPolygon(type, coordinates);
        }

        /// <summary> Initializes new instance of GeoJsonGeometryCollectionData class. </summary>
        /// <param name="geometries"> Contains a list of valid `GeoJSON` geometry objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude). </param>
        /// <returns> A new <see cref="Models.GeoJsonGeometryCollectionData"/> instance for mocking. </returns>
        public static GeoJsonGeometryCollectionData GeoJsonGeometryCollectionData(IReadOnlyList<GeoJsonGeometry> geometries = default)
        {
            geometries ??= new List<GeoJsonGeometry>();
            return new GeoJsonGeometryCollectionData(geometries);
        }

        /// <summary> Initializes new instance of GeoJsonGeometryCollection class. </summary>
        /// <param name="type"> Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection. </param>
        /// <param name="geometries"> Contains a list of valid `GeoJSON` geometry objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude). </param>
        /// <returns> A new <see cref="Models.GeoJsonGeometryCollection"/> instance for mocking. </returns>
        public static GeoJsonGeometryCollection GeoJsonGeometryCollection(GeoJsonObjectType type = default, IReadOnlyList<GeoJsonGeometry> geometries = default)
        {
            geometries ??= new List<GeoJsonGeometry>();
            return new GeoJsonGeometryCollection(type, geometries);
        }
    }
}
