// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Maps.Mobility.Models;

namespace Azure.Maps.Mobility
{
    internal partial class MobilityRestClient
    {
        private Geography? geography;
        private string xMsClientId;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of MobilityRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public MobilityRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Geography? geography = null, string xMsClientId = null, string apiVersion = "1.0")
        {
            geography ??= Geography.Us;
            if (apiVersion == null)
            {
                throw new ArgumentNullException(nameof(apiVersion));
            }

            this.geography = geography;
            this.xMsClientId = xMsClientId;
            this.apiVersion = apiVersion;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetMetroAreaPreviewRequest(ResponseFormat format, string query, MetroAreaQueryType? queryType, string language)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.ToString(), true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/mobility/metroArea/id/", false);
            uri.AppendPath(format.ToString(), true);
            uri.AppendQuery("api-version", apiVersion, true);
            uri.AppendQuery("query", query, true);
            if (queryType != null)
            {
                uri.AppendQuery("queryType", queryType.Value.ToString(), true);
            }
            if (language != null)
            {
                uri.AppendQuery("language", language, true);
            }
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Metro Area API**
        /// 
        /// **Applies to**: S1 pricing tier.
        /// 
        /// Service allows users to request metro areas in which the Azure Maps Mobility Service is available. The service supports filtering results by country or coordinate location. Information returned includes Metro Area  details such as metro Id, name and a representation of the metro area geometry in GeoJSON format.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> The applicable location input. Can be position (specified as a comma  separated string composed by latitude followed by longitude e.g. &quot;47.641268,-122.125679&quot;) or  countryCode (2-character ISO country code). </param>
        /// <param name="queryType"> The type of the query. By default originType=position, specified as a comma separated string composed by latitude followed by longitude, e.g. &quot;47.641268,-122.125679”. </param>
        /// <param name="language"> Language in which search results will be returned.  Only NGT is supported. Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> is null. </exception>
        public async Task<Response<MetroAreaResponse>> GetMetroAreaPreviewAsync(ResponseFormat format, string query, MetroAreaQueryType? queryType = null, string language = null, CancellationToken cancellationToken = default)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetMetroAreaPreviewRequest(format, query, queryType, language);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetroAreaResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = MetroAreaResponse.DeserializeMetroAreaResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Metro Area API**
        /// 
        /// **Applies to**: S1 pricing tier.
        /// 
        /// Service allows users to request metro areas in which the Azure Maps Mobility Service is available. The service supports filtering results by country or coordinate location. Information returned includes Metro Area  details such as metro Id, name and a representation of the metro area geometry in GeoJSON format.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> The applicable location input. Can be position (specified as a comma  separated string composed by latitude followed by longitude e.g. &quot;47.641268,-122.125679&quot;) or  countryCode (2-character ISO country code). </param>
        /// <param name="queryType"> The type of the query. By default originType=position, specified as a comma separated string composed by latitude followed by longitude, e.g. &quot;47.641268,-122.125679”. </param>
        /// <param name="language"> Language in which search results will be returned.  Only NGT is supported. Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> is null. </exception>
        public Response<MetroAreaResponse> GetMetroAreaPreview(ResponseFormat format, string query, MetroAreaQueryType? queryType = null, string language = null, CancellationToken cancellationToken = default)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetMetroAreaPreviewRequest(format, query, queryType, language);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetroAreaResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = MetroAreaResponse.DeserializeMetroAreaResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetMetroAreaInfoPreviewRequest(ResponseFormat format, int query, IEnumerable<MetroAreaDetailType> detailType, string language)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.ToString(), true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/mobility/metroArea/info/", false);
            uri.AppendPath(format.ToString(), true);
            uri.AppendQuery("api-version", apiVersion, true);
            uri.AppendQuery("query", query, true);
            uri.AppendQueryDelimited("detailType", detailType, ",", true);
            if (language != null)
            {
                uri.AppendQuery("language", language, true);
            }
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Metro Area Info API**
        /// 
        /// **Applies to**: S1 pricing tier.
        /// 
        /// Service allows users to request additional information for metro areas in which the Azure Maps Mobility services are available. Information such as supported transit types, transit agencies and active alerts is available, depending on the options selected. Also, the service returns information if the public transit fare information is available for the requested metro area.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> metroId. The unique id of the metro area. Required parameter specifying the required metro area to search in. Can be retrieved via [Get Metro Area API](https://aka.ms/AzureMapsMobilityTransitRoute). </param>
        /// <param name="detailType">
        /// Specify details requested respective to the metro area as a comma separated list. Supported values are:
        ///   * `agencies` - Return a list of all public transit agencies operating in the given metro area.
        ///   * `alerts` - Returns a list of all active service alerts, that are defined in the metro or agency level, and are not connected to a specific line or stop.
        ///   * `alertDetails` - Applicable only when alerts are requested. Returns details of the alerts.
        ///   * `transitTypes` - Returns a list of all supported transit types in the given metro area.
        /// </param>
        /// <param name="language"> Language in which search results will be returned.  Only NGT is supported. Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="detailType"/> is null. </exception>
        public async Task<Response<MetroAreaInfoResponse>> GetMetroAreaInfoPreviewAsync(ResponseFormat format, int query, IEnumerable<MetroAreaDetailType> detailType, string language = null, CancellationToken cancellationToken = default)
        {
            if (detailType == null)
            {
                throw new ArgumentNullException(nameof(detailType));
            }

            using var message = CreateGetMetroAreaInfoPreviewRequest(format, query, detailType, language);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetroAreaInfoResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = MetroAreaInfoResponse.DeserializeMetroAreaInfoResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Metro Area Info API**
        /// 
        /// **Applies to**: S1 pricing tier.
        /// 
        /// Service allows users to request additional information for metro areas in which the Azure Maps Mobility services are available. Information such as supported transit types, transit agencies and active alerts is available, depending on the options selected. Also, the service returns information if the public transit fare information is available for the requested metro area.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> metroId. The unique id of the metro area. Required parameter specifying the required metro area to search in. Can be retrieved via [Get Metro Area API](https://aka.ms/AzureMapsMobilityTransitRoute). </param>
        /// <param name="detailType">
        /// Specify details requested respective to the metro area as a comma separated list. Supported values are:
        ///   * `agencies` - Return a list of all public transit agencies operating in the given metro area.
        ///   * `alerts` - Returns a list of all active service alerts, that are defined in the metro or agency level, and are not connected to a specific line or stop.
        ///   * `alertDetails` - Applicable only when alerts are requested. Returns details of the alerts.
        ///   * `transitTypes` - Returns a list of all supported transit types in the given metro area.
        /// </param>
        /// <param name="language"> Language in which search results will be returned.  Only NGT is supported. Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="detailType"/> is null. </exception>
        public Response<MetroAreaInfoResponse> GetMetroAreaInfoPreview(ResponseFormat format, int query, IEnumerable<MetroAreaDetailType> detailType, string language = null, CancellationToken cancellationToken = default)
        {
            if (detailType == null)
            {
                throw new ArgumentNullException(nameof(detailType));
            }

            using var message = CreateGetMetroAreaInfoPreviewRequest(format, query, detailType, language);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MetroAreaInfoResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = MetroAreaInfoResponse.DeserializeMetroAreaInfoResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetNearbyTransitPreviewRequest(ResponseFormat format, string query, int? metroId, int? limit, int? radius, string objectType, string language)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.ToString(), true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/mobility/transit/nearby/", false);
            uri.AppendPath(format.ToString(), true);
            uri.AppendQuery("api-version", apiVersion, true);
            if (metroId != null)
            {
                uri.AppendQuery("metroId", metroId.Value, true);
            }
            uri.AppendQuery("query", query, true);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (radius != null)
            {
                uri.AppendQuery("radius", radius.Value, true);
            }
            if (objectType != null)
            {
                uri.AppendQuery("objectType", objectType, true);
            }
            if (language != null)
            {
                uri.AppendQuery("language", language, true);
            }
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Find Nearby Transit API**
        /// 
        /// **Applies to**: S1 pricing tier.
        /// 
        /// Get Nearby Transit service allows you to search public transit stops around a given location  returning the transit object details. Service allows users to search for public transit stops within a given radius returning a set of stops with stop details. Additional  information such as transit operator information is returned depending on the options selected. The returned information can be used for further processing such as requesting [real-time arrivals](https://aka.ms/AzureMapsMobilityRealTimeArrivals) for the stop or [transit stop details](https://aka.ms/AzureMapsMobilityTransitStop) such as main transit type of most lines stopping for a given public, active service alerts or main transport agency.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> Location input from user. The applicable location query specified as a comma separated string  composed by latitude followed by longitude e.g. &quot;47.641268,-122.125679&quot;. </param>
        /// <param name="metroId"> The unique id of the metro area. Can be retrieved via [Get Metro Area API](https://aka.ms/AzureMapsMobilityMetro). </param>
        /// <param name="limit"> Maximum number of responses that will be returned. Default is 3, minimum 1 and maximum 100. Sort order is based on distance from input location. </param>
        /// <param name="radius"> Specifies the search area to constrain a search. The radius in meters  to for the results to be constrained to the defined area. Default value is 30 meters, minimum 1 meter and maximum 5000 meters (5km). </param>
        /// <param name="objectType"> The transit object type. By default, objectType is set to `stop`. </param>
        /// <param name="language"> Language in which search results will be returned.  Only NGT is supported. Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> is null. </exception>
        public async Task<Response<NearbyTransitResponse>> GetNearbyTransitPreviewAsync(ResponseFormat format, string query, int? metroId = null, int? limit = null, int? radius = null, string objectType = null, string language = null, CancellationToken cancellationToken = default)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetNearbyTransitPreviewRequest(format, query, metroId, limit, radius, objectType, language);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        NearbyTransitResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = NearbyTransitResponse.DeserializeNearbyTransitResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Find Nearby Transit API**
        /// 
        /// **Applies to**: S1 pricing tier.
        /// 
        /// Get Nearby Transit service allows you to search public transit stops around a given location  returning the transit object details. Service allows users to search for public transit stops within a given radius returning a set of stops with stop details. Additional  information such as transit operator information is returned depending on the options selected. The returned information can be used for further processing such as requesting [real-time arrivals](https://aka.ms/AzureMapsMobilityRealTimeArrivals) for the stop or [transit stop details](https://aka.ms/AzureMapsMobilityTransitStop) such as main transit type of most lines stopping for a given public, active service alerts or main transport agency.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> Location input from user. The applicable location query specified as a comma separated string  composed by latitude followed by longitude e.g. &quot;47.641268,-122.125679&quot;. </param>
        /// <param name="metroId"> The unique id of the metro area. Can be retrieved via [Get Metro Area API](https://aka.ms/AzureMapsMobilityMetro). </param>
        /// <param name="limit"> Maximum number of responses that will be returned. Default is 3, minimum 1 and maximum 100. Sort order is based on distance from input location. </param>
        /// <param name="radius"> Specifies the search area to constrain a search. The radius in meters  to for the results to be constrained to the defined area. Default value is 30 meters, minimum 1 meter and maximum 5000 meters (5km). </param>
        /// <param name="objectType"> The transit object type. By default, objectType is set to `stop`. </param>
        /// <param name="language"> Language in which search results will be returned.  Only NGT is supported. Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> is null. </exception>
        public Response<NearbyTransitResponse> GetNearbyTransitPreview(ResponseFormat format, string query, int? metroId = null, int? limit = null, int? radius = null, string objectType = null, string language = null, CancellationToken cancellationToken = default)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetNearbyTransitPreviewRequest(format, query, metroId, limit, radius, objectType, language);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        NearbyTransitResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = NearbyTransitResponse.DeserializeNearbyTransitResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetTransitLineInfoPreviewRequest(ResponseFormat format, string query, int? metroId, IEnumerable<TransitLineDetailType> detailType, string language)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.ToString(), true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/mobility/transit/line/", false);
            uri.AppendPath(format.ToString(), true);
            uri.AppendQuery("api-version", apiVersion, true);
            if (metroId != null)
            {
                uri.AppendQuery("metroId", metroId.Value, true);
            }
            uri.AppendQuery("query", query, true);
            if (detailType != null)
            {
                uri.AppendQueryDelimited("detailType", detailType, ",", true);
            }
            if (language != null)
            {
                uri.AppendQuery("language", language, true);
            }
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Transit Line Info API**
        /// 
        /// **Applies to**: S1 pricing tier.
        /// 
        /// Your scenario might require requesting transit line specific data such as stops and line geometry. Transit Line Info service  allows you to request line group by line group id returning a line group comprised a set of lines.  Additional information such  as 24 hours static schedule, active alerts for the line group and line patterns is also available, depending on the options  selected. Mobility services uses a parallel data model for public transit lines and line groups. Usually line group contains  2 lines, one going from A to B, and the other returning from B to A, both operating by the same Public Transport Agency having  the same line number. We recommend you review our guidance [article](https://aka.ms/AMapsPublicTRansitConcepts) to understand  the concepts of lines and line groups.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> lineGroupId, for example,&apos;666074&apos;. Typically contains 2 lines having the same agency and line, one going from A to B, and the other from B to A. </param>
        /// <param name="metroId"> The unique id of the metro area. Can be retrieved via [Get Metro Area API](https://aka.ms/AzureMapsMobilityMetro). </param>
        /// <param name="detailType">
        /// Specify additional details requested respective to the line group as a comma separated list. As a default service returns line basic info. Supported values are:
        ///   * `alerts` - Return any active service alerts for the specified stop. Response provides brief information for disruption in service and all basic data associated with the alert.
        ///   * `alertDetails` - Can only be used in conjunction with detailType=alerts.Return additional details associated with the active service alerts.
        ///   * `lines` - Return transit lines that stops at the specified stop.
        ///   * `stops` - Return list of stops the line group goes through.
        ///   * `schedule` - Return a 24h static schedule for the specified line group from the current time of the day to the end of the current day.
        ///   * `patterns` - Return list of patterns this group is comprised of. A pattern consists of a stop sequence and shape per line.
        /// </param>
        /// <param name="language"> Language in which search results will be returned.  Only NGT is supported. Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> is null. </exception>
        public async Task<Response<TransitLineInfoResponse>> GetTransitLineInfoPreviewAsync(ResponseFormat format, string query, int? metroId = null, IEnumerable<TransitLineDetailType> detailType = null, string language = null, CancellationToken cancellationToken = default)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetTransitLineInfoPreviewRequest(format, query, metroId, detailType, language);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TransitLineInfoResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = TransitLineInfoResponse.DeserializeTransitLineInfoResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Transit Line Info API**
        /// 
        /// **Applies to**: S1 pricing tier.
        /// 
        /// Your scenario might require requesting transit line specific data such as stops and line geometry. Transit Line Info service  allows you to request line group by line group id returning a line group comprised a set of lines.  Additional information such  as 24 hours static schedule, active alerts for the line group and line patterns is also available, depending on the options  selected. Mobility services uses a parallel data model for public transit lines and line groups. Usually line group contains  2 lines, one going from A to B, and the other returning from B to A, both operating by the same Public Transport Agency having  the same line number. We recommend you review our guidance [article](https://aka.ms/AMapsPublicTRansitConcepts) to understand  the concepts of lines and line groups.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> lineGroupId, for example,&apos;666074&apos;. Typically contains 2 lines having the same agency and line, one going from A to B, and the other from B to A. </param>
        /// <param name="metroId"> The unique id of the metro area. Can be retrieved via [Get Metro Area API](https://aka.ms/AzureMapsMobilityMetro). </param>
        /// <param name="detailType">
        /// Specify additional details requested respective to the line group as a comma separated list. As a default service returns line basic info. Supported values are:
        ///   * `alerts` - Return any active service alerts for the specified stop. Response provides brief information for disruption in service and all basic data associated with the alert.
        ///   * `alertDetails` - Can only be used in conjunction with detailType=alerts.Return additional details associated with the active service alerts.
        ///   * `lines` - Return transit lines that stops at the specified stop.
        ///   * `stops` - Return list of stops the line group goes through.
        ///   * `schedule` - Return a 24h static schedule for the specified line group from the current time of the day to the end of the current day.
        ///   * `patterns` - Return list of patterns this group is comprised of. A pattern consists of a stop sequence and shape per line.
        /// </param>
        /// <param name="language"> Language in which search results will be returned.  Only NGT is supported. Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> is null. </exception>
        public Response<TransitLineInfoResponse> GetTransitLineInfoPreview(ResponseFormat format, string query, int? metroId = null, IEnumerable<TransitLineDetailType> detailType = null, string language = null, CancellationToken cancellationToken = default)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetTransitLineInfoPreviewRequest(format, query, metroId, detailType, language);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TransitLineInfoResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = TransitLineInfoResponse.DeserializeTransitLineInfoResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetTransitStopInfoPreviewRequest(ResponseFormat format, string query, int? metroId, TransitStopQueryType? queryType, IEnumerable<TransitStopDetailType> detailType, string language)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.ToString(), true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/mobility/transit/stop/", false);
            uri.AppendPath(format.ToString(), true);
            uri.AppendQuery("api-version", apiVersion, true);
            if (metroId != null)
            {
                uri.AppendQuery("metroId", metroId.Value, true);
            }
            uri.AppendQuery("query", query, true);
            if (queryType != null)
            {
                uri.AppendQuery("queryType", queryType.Value.ToString(), true);
            }
            if (detailType != null)
            {
                uri.AppendQueryDelimited("detailType", detailType, ",", true);
            }
            if (language != null)
            {
                uri.AppendQuery("language", language, true);
            }
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Transit Stop Info API**
        /// 
        /// **Applies to**: S1 pricing tier.
        /// 
        /// Get Transit Stop Info service allows you to request information for a given public transit stop. Basic information returned includes  details such as main transit type of most lines stopping for a given public and main transport agency. Additional details such as stop  lines and active service alerts for specified stop are also available, depending on the options selected.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> The stopId or stopKey for which the user is requesting transit stop details. </param>
        /// <param name="metroId"> The unique id of the metro area. Can be retrieved via [Get Metro Area API](https://aka.ms/AzureMapsMobilityMetro). </param>
        /// <param name="queryType"> The type of the unique query parameter of the stop. By default queryType=stopId. </param>
        /// <param name="detailType">
        /// Specify additional details requested respective to the transit stop as a comma separated list. Supported values are:
        ///   * `alerts` - Return any active service alerts for the specified stop. Response provides brief information for disruption in service and all basic data associated with the alert.
        ///   * `alertDetails` - Can only be used in conjunction with detailType=alerts.Return additional details associated with the active service alerts.
        ///   * `lines` - Return transit lines that stops at the specified stop.
        ///   * `lineGroups` - Return line groups that stops at the specified stop.
        /// </param>
        /// <param name="language"> Language in which search results will be returned.  Only NGT is supported. Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> is null. </exception>
        public async Task<Response<TransitStopInfoResponse>> GetTransitStopInfoPreviewAsync(ResponseFormat format, string query, int? metroId = null, TransitStopQueryType? queryType = null, IEnumerable<TransitStopDetailType> detailType = null, string language = null, CancellationToken cancellationToken = default)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetTransitStopInfoPreviewRequest(format, query, metroId, queryType, detailType, language);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TransitStopInfoResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = TransitStopInfoResponse.DeserializeTransitStopInfoResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Transit Stop Info API**
        /// 
        /// **Applies to**: S1 pricing tier.
        /// 
        /// Get Transit Stop Info service allows you to request information for a given public transit stop. Basic information returned includes  details such as main transit type of most lines stopping for a given public and main transport agency. Additional details such as stop  lines and active service alerts for specified stop are also available, depending on the options selected.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> The stopId or stopKey for which the user is requesting transit stop details. </param>
        /// <param name="metroId"> The unique id of the metro area. Can be retrieved via [Get Metro Area API](https://aka.ms/AzureMapsMobilityMetro). </param>
        /// <param name="queryType"> The type of the unique query parameter of the stop. By default queryType=stopId. </param>
        /// <param name="detailType">
        /// Specify additional details requested respective to the transit stop as a comma separated list. Supported values are:
        ///   * `alerts` - Return any active service alerts for the specified stop. Response provides brief information for disruption in service and all basic data associated with the alert.
        ///   * `alertDetails` - Can only be used in conjunction with detailType=alerts.Return additional details associated with the active service alerts.
        ///   * `lines` - Return transit lines that stops at the specified stop.
        ///   * `lineGroups` - Return line groups that stops at the specified stop.
        /// </param>
        /// <param name="language"> Language in which search results will be returned.  Only NGT is supported. Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> is null. </exception>
        public Response<TransitStopInfoResponse> GetTransitStopInfoPreview(ResponseFormat format, string query, int? metroId = null, TransitStopQueryType? queryType = null, IEnumerable<TransitStopDetailType> detailType = null, string language = null, CancellationToken cancellationToken = default)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetTransitStopInfoPreviewRequest(format, query, metroId, queryType, detailType, language);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TransitStopInfoResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = TransitStopInfoResponse.DeserializeTransitStopInfoResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetTransitRoutePreviewRequest(ResponseFormat format, string origin, string destination, int? metroId, OriginType? originType, DestinationType? destinationType, IEnumerable<ModeType> modeType, IEnumerable<TransitTypeFilter> transitType, IEnumerable<string> agency, AgencyType? agencyType, string time, TimeType? timeType, TransitRouteType? routeType, string bikeType, string language)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.ToString(), true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/mobility/transit/route/", false);
            uri.AppendPath(format.ToString(), true);
            uri.AppendQuery("api-version", apiVersion, true);
            if (metroId != null)
            {
                uri.AppendQuery("metroId", metroId.Value, true);
            }
            uri.AppendQuery("origin", origin, true);
            if (originType != null)
            {
                uri.AppendQuery("originType", originType.Value.ToString(), true);
            }
            uri.AppendQuery("destination", destination, true);
            if (destinationType != null)
            {
                uri.AppendQuery("destinationType", destinationType.Value.ToString(), true);
            }
            if (modeType != null)
            {
                uri.AppendQueryDelimited("modeType", modeType, ",", true);
            }
            if (transitType != null)
            {
                uri.AppendQueryDelimited("transitType", transitType, ",", true);
            }
            if (agency != null)
            {
                uri.AppendQueryDelimited("agency", agency, ",", true);
            }
            if (agencyType != null)
            {
                uri.AppendQuery("agencyType", agencyType.Value.ToString(), true);
            }
            if (time != null)
            {
                uri.AppendQuery("time", time, true);
            }
            if (timeType != null)
            {
                uri.AppendQuery("timeType", timeType.Value.ToString(), true);
            }
            if (routeType != null)
            {
                uri.AppendQuery("routeType", routeType.Value.ToString(), true);
            }
            if (bikeType != null)
            {
                uri.AppendQuery("bikeType", bikeType, true);
            }
            if (language != null)
            {
                uri.AppendQuery("language", language, true);
            }
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Transit Route API**
        /// 
        /// **Applies to**: S1 pricing tier.
        /// 
        /// Get Transit Route API will allow trip planning returning the best possible route options between an origin and destination by using multi-modal search. Service provides a variety of travel modes, including walk, bike, and public transit.  The API supports parameters to request one or multiple public transit types such as bus, tram and subway, and prefer a specific transit agency operating in the area. Also, service provides transit fare details and options to choose optimal route with least walk or transfers and specify arrival or departure times when user need to be at a specific destination by a certain time.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="origin"> The origin of the route. By default originType=position, specified as a comma separated string composed by latitude followed by longitude, e.g. &quot;47.641268,-122.125679”. </param>
        /// <param name="destination"> The destination of the route. By default the destinationType=position, specified as a comma separated string composed by latitude followed by longitude, e.g. &quot;47.641268,-122.125679”. </param>
        /// <param name="metroId"> The unique id of the metro area. Can be retrieved via [Get Metro Area API](https://aka.ms/AzureMapsMobilityMetro). </param>
        /// <param name="originType"> The type of the origin. By default originType=position, specified as a comma separated string composed by latitude followed by longitude, e.g., &quot;47.641268,-122.125679”. </param>
        /// <param name="destinationType"> The type of the destination. </param>
        /// <param name="modeType">
        /// The mode of travel for the requested route; as comma separated list. If not specified, all modes will be allowed. All modes might not be available in all metro areas. If valid trip is not found, empty result will be returned. Supported values are:
        ///   * `walk` - Walk (pedestrian)
        ///   * `bike` - Bike
        ///   * `publicTransit` - Public transit.
        /// </param>
        /// <param name="transitType">
        /// Applicable only with modeType = publicTransit. Allow only a specific set of public transit types (as a comma separated list) to be returned for the route.  Note that the requested transitType may not be available for the entire route. If not specified, all modes will be allowed. Supported values are:
        ///   * `bus` - Bus
        ///   * `cableCar` - Cable car
        ///   * `ferry` - Ferry
        ///   * `funicular` - Funicular
        ///   * `gondola` - Gondola
        ///   * `rail` - Rail
        ///   * `tram` - Tram
        ///   * `subway` - Subway/Metro.
        /// </param>
        /// <param name="agency"> Specifies whether to prefer routes from a specific set of agencies if possible; as a comma separated list. If valid trip isn’t found with the preferred agency, or only one with very long trips or with large number of transfers, itineraries with other agencies will be returned. </param>
        /// <param name="agencyType"> Specifies the agency identifier to request routes from preferred agencies. By default the agencyType=agencyId. </param>
        /// <param name="time"> The time of departure or arrival in the local time in ISO format (2019-04-05T14:24:18-04:00). If timeType is not specified, it will be assumed to be &apos;departure&apos; and time is the current local time at the origin point. </param>
        /// <param name="timeType"> Specifies whether the time signifies departure time or arrival time. If not defined, default value is &apos;departure&apos;. </param>
        /// <param name="routeType"> The type of route requested. If not specified, &apos;optimal&apos; will be used. </param>
        /// <param name="bikeType"> Bike type of the bike. Specifies which type of bikes will be used. Only private bikes are supported. </param>
        /// <param name="language"> Language in which search results will be returned.  Only NGT is supported. Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="origin"/> or <paramref name="destination"/> is null. </exception>
        public async Task<Response<TransitRouteResponse>> GetTransitRoutePreviewAsync(ResponseFormat format, string origin, string destination, int? metroId = null, OriginType? originType = null, DestinationType? destinationType = null, IEnumerable<ModeType> modeType = null, IEnumerable<TransitTypeFilter> transitType = null, IEnumerable<string> agency = null, AgencyType? agencyType = null, string time = null, TimeType? timeType = null, TransitRouteType? routeType = null, string bikeType = null, string language = null, CancellationToken cancellationToken = default)
        {
            if (origin == null)
            {
                throw new ArgumentNullException(nameof(origin));
            }
            if (destination == null)
            {
                throw new ArgumentNullException(nameof(destination));
            }

            using var message = CreateGetTransitRoutePreviewRequest(format, origin, destination, metroId, originType, destinationType, modeType, transitType, agency, agencyType, time, timeType, routeType, bikeType, language);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TransitRouteResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = TransitRouteResponse.DeserializeTransitRouteResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Transit Route API**
        /// 
        /// **Applies to**: S1 pricing tier.
        /// 
        /// Get Transit Route API will allow trip planning returning the best possible route options between an origin and destination by using multi-modal search. Service provides a variety of travel modes, including walk, bike, and public transit.  The API supports parameters to request one or multiple public transit types such as bus, tram and subway, and prefer a specific transit agency operating in the area. Also, service provides transit fare details and options to choose optimal route with least walk or transfers and specify arrival or departure times when user need to be at a specific destination by a certain time.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="origin"> The origin of the route. By default originType=position, specified as a comma separated string composed by latitude followed by longitude, e.g. &quot;47.641268,-122.125679”. </param>
        /// <param name="destination"> The destination of the route. By default the destinationType=position, specified as a comma separated string composed by latitude followed by longitude, e.g. &quot;47.641268,-122.125679”. </param>
        /// <param name="metroId"> The unique id of the metro area. Can be retrieved via [Get Metro Area API](https://aka.ms/AzureMapsMobilityMetro). </param>
        /// <param name="originType"> The type of the origin. By default originType=position, specified as a comma separated string composed by latitude followed by longitude, e.g., &quot;47.641268,-122.125679”. </param>
        /// <param name="destinationType"> The type of the destination. </param>
        /// <param name="modeType">
        /// The mode of travel for the requested route; as comma separated list. If not specified, all modes will be allowed. All modes might not be available in all metro areas. If valid trip is not found, empty result will be returned. Supported values are:
        ///   * `walk` - Walk (pedestrian)
        ///   * `bike` - Bike
        ///   * `publicTransit` - Public transit.
        /// </param>
        /// <param name="transitType">
        /// Applicable only with modeType = publicTransit. Allow only a specific set of public transit types (as a comma separated list) to be returned for the route.  Note that the requested transitType may not be available for the entire route. If not specified, all modes will be allowed. Supported values are:
        ///   * `bus` - Bus
        ///   * `cableCar` - Cable car
        ///   * `ferry` - Ferry
        ///   * `funicular` - Funicular
        ///   * `gondola` - Gondola
        ///   * `rail` - Rail
        ///   * `tram` - Tram
        ///   * `subway` - Subway/Metro.
        /// </param>
        /// <param name="agency"> Specifies whether to prefer routes from a specific set of agencies if possible; as a comma separated list. If valid trip isn’t found with the preferred agency, or only one with very long trips or with large number of transfers, itineraries with other agencies will be returned. </param>
        /// <param name="agencyType"> Specifies the agency identifier to request routes from preferred agencies. By default the agencyType=agencyId. </param>
        /// <param name="time"> The time of departure or arrival in the local time in ISO format (2019-04-05T14:24:18-04:00). If timeType is not specified, it will be assumed to be &apos;departure&apos; and time is the current local time at the origin point. </param>
        /// <param name="timeType"> Specifies whether the time signifies departure time or arrival time. If not defined, default value is &apos;departure&apos;. </param>
        /// <param name="routeType"> The type of route requested. If not specified, &apos;optimal&apos; will be used. </param>
        /// <param name="bikeType"> Bike type of the bike. Specifies which type of bikes will be used. Only private bikes are supported. </param>
        /// <param name="language"> Language in which search results will be returned.  Only NGT is supported. Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="origin"/> or <paramref name="destination"/> is null. </exception>
        public Response<TransitRouteResponse> GetTransitRoutePreview(ResponseFormat format, string origin, string destination, int? metroId = null, OriginType? originType = null, DestinationType? destinationType = null, IEnumerable<ModeType> modeType = null, IEnumerable<TransitTypeFilter> transitType = null, IEnumerable<string> agency = null, AgencyType? agencyType = null, string time = null, TimeType? timeType = null, TransitRouteType? routeType = null, string bikeType = null, string language = null, CancellationToken cancellationToken = default)
        {
            if (origin == null)
            {
                throw new ArgumentNullException(nameof(origin));
            }
            if (destination == null)
            {
                throw new ArgumentNullException(nameof(destination));
            }

            using var message = CreateGetTransitRoutePreviewRequest(format, origin, destination, metroId, originType, destinationType, modeType, transitType, agency, agencyType, time, timeType, routeType, bikeType, language);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TransitRouteResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = TransitRouteResponse.DeserializeTransitRouteResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetTransitItineraryPreviewRequest(ResponseFormat format, string query, IEnumerable<TransitItineraryDetailType> detailType, string language)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.ToString(), true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/mobility/transit/itinerary/", false);
            uri.AppendPath(format.ToString(), true);
            uri.AppendQuery("api-version", apiVersion, true);
            uri.AppendQuery("query", query, true);
            if (detailType != null)
            {
                uri.AppendQueryDelimited("detailType", detailType, ",", true);
            }
            if (language != null)
            {
                uri.AppendQuery("language", language, true);
            }
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Transit Itinerary API**
        /// 
        /// **Applies to**: S1 pricing tier.
        /// 
        /// Returns data according to an itinerary Id previously returned by [Transit Route API](https://aka.ms/AzureMapsMobilityTransitRoute). The basic info contains data as to the various legs comprising  the itinerary, including the locations, public transit lines, start and end times and fare information. Users can request additional routing information such as the  shape of the itinerary and detailed itinerary schedules is also available, depending on the options selected. An itinerary is available up to 24  hours following a search request.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> The unique id (itineraryId) of an itinerary previously returned by [Transit Route API](https://aka.ms/AzureMapsMobilityTransitRoute). </param>
        /// <param name="detailType">
        /// Specify additional details returned in the transit route itinerary response, as a comma separated list. Supported values are:
        ///   * `geometry` - Shape of an in GeoJSON format. For public transit legs will return also the stops that the leg passes through. For walk and bike legs, will return also the turn-by-turn navigation data.
        ///   * `schedule` - Static schedule data as to all departures of Public Transit legs from the current time of the day to the end of the current day.
        /// </param>
        /// <param name="language"> Language in which search results will be returned.  Only NGT is supported. Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> is null. </exception>
        public async Task<Response<TransitItineraryResponse>> GetTransitItineraryPreviewAsync(ResponseFormat format, string query, IEnumerable<TransitItineraryDetailType> detailType = null, string language = null, CancellationToken cancellationToken = default)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetTransitItineraryPreviewRequest(format, query, detailType, language);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TransitItineraryResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = TransitItineraryResponse.DeserializeTransitItineraryResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Transit Itinerary API**
        /// 
        /// **Applies to**: S1 pricing tier.
        /// 
        /// Returns data according to an itinerary Id previously returned by [Transit Route API](https://aka.ms/AzureMapsMobilityTransitRoute). The basic info contains data as to the various legs comprising  the itinerary, including the locations, public transit lines, start and end times and fare information. Users can request additional routing information such as the  shape of the itinerary and detailed itinerary schedules is also available, depending on the options selected. An itinerary is available up to 24  hours following a search request.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> The unique id (itineraryId) of an itinerary previously returned by [Transit Route API](https://aka.ms/AzureMapsMobilityTransitRoute). </param>
        /// <param name="detailType">
        /// Specify additional details returned in the transit route itinerary response, as a comma separated list. Supported values are:
        ///   * `geometry` - Shape of an in GeoJSON format. For public transit legs will return also the stops that the leg passes through. For walk and bike legs, will return also the turn-by-turn navigation data.
        ///   * `schedule` - Static schedule data as to all departures of Public Transit legs from the current time of the day to the end of the current day.
        /// </param>
        /// <param name="language"> Language in which search results will be returned.  Only NGT is supported. Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> is null. </exception>
        public Response<TransitItineraryResponse> GetTransitItineraryPreview(ResponseFormat format, string query, IEnumerable<TransitItineraryDetailType> detailType = null, string language = null, CancellationToken cancellationToken = default)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetTransitItineraryPreviewRequest(format, query, detailType, language);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TransitItineraryResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = TransitItineraryResponse.DeserializeTransitItineraryResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRealTimeArrivalsPreviewRequest(ResponseFormat format, string query, int? metroId, RealTimeArrivalsQueryType? queryType, StopQueryType? stopQueryType, int? limit, int? maxMinutesInFuture, IEnumerable<TransitTypeFilter> transitType, IEnumerable<string> agency, AgencyType? agencyType, int? timeoutInSeconds, string language)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.ToString(), true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/mobility/realtime/arrivals/", false);
            uri.AppendPath(format.ToString(), true);
            uri.AppendQuery("api-version", apiVersion, true);
            if (metroId != null)
            {
                uri.AppendQuery("metroId", metroId.Value, true);
            }
            uri.AppendQuery("query", query, true);
            if (queryType != null)
            {
                uri.AppendQuery("queryType", queryType.Value.ToString(), true);
            }
            if (stopQueryType != null)
            {
                uri.AppendQuery("stopQueryType", stopQueryType.Value.ToString(), true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (maxMinutesInFuture != null)
            {
                uri.AppendQuery("maxMinutesInFuture", maxMinutesInFuture.Value, true);
            }
            if (transitType != null)
            {
                uri.AppendQueryDelimited("transitType", transitType, ",", true);
            }
            if (agency != null)
            {
                uri.AppendQueryDelimited("agency", agency, ",", true);
            }
            if (agencyType != null)
            {
                uri.AppendQuery("agencyType", agencyType.Value.ToString(), true);
            }
            if (timeoutInSeconds != null)
            {
                uri.AppendQuery("timeoutInSeconds", timeoutInSeconds.Value, true);
            }
            if (language != null)
            {
                uri.AppendQuery("language", language, true);
            }
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Real-time Arrivals API**
        /// 
        /// **Applies to**: S1 pricing tier.
        /// 
        /// Get Real Time Arrivals API returns for a given a stop, line or location the requested number of real-time arrivals. Endpoint support different modes to request real-time arrivals such as number of live arrivals for all lines arriving at the specified stop or all arrivals of a line to stops near the user’s location. The API supports parameters to request one or multiple public transit types such as bus, tram and subway, maximum number if arrivals, and prefer a specific transit agency operating in the area. In some cases real-time arrivals may not be available, for example, if arrival is too far in the future or transit vehicle does not have capability to share the real-time location. This is symbolized in a scheduleType field present in all responses.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> Stop, line or location identifier. </param>
        /// <param name="metroId"> The unique id of the metro area. Can be retrieved via [Get Metro Area API](https://aka.ms/AzureMapsMobilityMetro). </param>
        /// <param name="queryType"> The type of the query parameter. Defines the mode of the request. Only one mode per request is supported. By default queryType is set to be ‘stops’ returning the requested number of Live Arrivals for all lines arriving at the specified stop. </param>
        /// <param name="stopQueryType"> The type of the unique query parameter of the stop. By default stopQueryType=stopId. This parameter can only be used in conjunction with queryType=stops or queryType=lineAndStop. </param>
        /// <param name="limit"> The maximum arrivals to return. If not specified, the system default will be used. For stops max number of arrivals per stop. For lines max arrivals per stop on the line. For everything else max arrivals overall. </param>
        /// <param name="maxMinutesInFuture"> The maximum time (in minutes) in the future to return arrivals for. If not specified, the system default (30 minutes) will be used.  The minimum value is 0 and maximum value is 60 minutes. </param>
        /// <param name="transitType">
        /// Type of public transit user is requesting respective transit stop, as a comma separated list. For example, transitType=Bus,Subway. If not specified, all will be allowed. This parameter can only be used in conjunction with queryType=stops. Supported values are:
        ///   * `bus` - Bus
        ///   * `cableCar` - Cable car
        ///   * `ferry` - Ferry
        ///   * `funicular` - Funicular
        ///   * `gondola` - Gondola
        ///   * `rail` - Rail
        ///   * `tram` - Tram
        ///   * `subway` - Subway/Metro.
        /// </param>
        /// <param name="agency"> In case you prefer routes from a specific set of agencies to be returned. Specified as a comma separated string. </param>
        /// <param name="agencyType"> Specifies the agency identifier to request routes from a specific set of agencies to be returned. By default the agencyType=agencyId. </param>
        /// <param name="timeoutInSeconds"> Time in seconds within which if the provider doesn’t respond, end point will return static data. </param>
        /// <param name="language"> Language in which search results will be returned.  Only NGT is supported. Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> is null. </exception>
        public async Task<Response<RealTimeArrivalsResponse>> GetRealTimeArrivalsPreviewAsync(ResponseFormat format, string query, int? metroId = null, RealTimeArrivalsQueryType? queryType = null, StopQueryType? stopQueryType = null, int? limit = null, int? maxMinutesInFuture = null, IEnumerable<TransitTypeFilter> transitType = null, IEnumerable<string> agency = null, AgencyType? agencyType = null, int? timeoutInSeconds = null, string language = null, CancellationToken cancellationToken = default)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetRealTimeArrivalsPreviewRequest(format, query, metroId, queryType, stopQueryType, limit, maxMinutesInFuture, transitType, agency, agencyType, timeoutInSeconds, language);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RealTimeArrivalsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RealTimeArrivalsResponse.DeserializeRealTimeArrivalsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Real-time Arrivals API**
        /// 
        /// **Applies to**: S1 pricing tier.
        /// 
        /// Get Real Time Arrivals API returns for a given a stop, line or location the requested number of real-time arrivals. Endpoint support different modes to request real-time arrivals such as number of live arrivals for all lines arriving at the specified stop or all arrivals of a line to stops near the user’s location. The API supports parameters to request one or multiple public transit types such as bus, tram and subway, maximum number if arrivals, and prefer a specific transit agency operating in the area. In some cases real-time arrivals may not be available, for example, if arrival is too far in the future or transit vehicle does not have capability to share the real-time location. This is symbolized in a scheduleType field present in all responses.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> Stop, line or location identifier. </param>
        /// <param name="metroId"> The unique id of the metro area. Can be retrieved via [Get Metro Area API](https://aka.ms/AzureMapsMobilityMetro). </param>
        /// <param name="queryType"> The type of the query parameter. Defines the mode of the request. Only one mode per request is supported. By default queryType is set to be ‘stops’ returning the requested number of Live Arrivals for all lines arriving at the specified stop. </param>
        /// <param name="stopQueryType"> The type of the unique query parameter of the stop. By default stopQueryType=stopId. This parameter can only be used in conjunction with queryType=stops or queryType=lineAndStop. </param>
        /// <param name="limit"> The maximum arrivals to return. If not specified, the system default will be used. For stops max number of arrivals per stop. For lines max arrivals per stop on the line. For everything else max arrivals overall. </param>
        /// <param name="maxMinutesInFuture"> The maximum time (in minutes) in the future to return arrivals for. If not specified, the system default (30 minutes) will be used.  The minimum value is 0 and maximum value is 60 minutes. </param>
        /// <param name="transitType">
        /// Type of public transit user is requesting respective transit stop, as a comma separated list. For example, transitType=Bus,Subway. If not specified, all will be allowed. This parameter can only be used in conjunction with queryType=stops. Supported values are:
        ///   * `bus` - Bus
        ///   * `cableCar` - Cable car
        ///   * `ferry` - Ferry
        ///   * `funicular` - Funicular
        ///   * `gondola` - Gondola
        ///   * `rail` - Rail
        ///   * `tram` - Tram
        ///   * `subway` - Subway/Metro.
        /// </param>
        /// <param name="agency"> In case you prefer routes from a specific set of agencies to be returned. Specified as a comma separated string. </param>
        /// <param name="agencyType"> Specifies the agency identifier to request routes from a specific set of agencies to be returned. By default the agencyType=agencyId. </param>
        /// <param name="timeoutInSeconds"> Time in seconds within which if the provider doesn’t respond, end point will return static data. </param>
        /// <param name="language"> Language in which search results will be returned.  Only NGT is supported. Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> is null. </exception>
        public Response<RealTimeArrivalsResponse> GetRealTimeArrivalsPreview(ResponseFormat format, string query, int? metroId = null, RealTimeArrivalsQueryType? queryType = null, StopQueryType? stopQueryType = null, int? limit = null, int? maxMinutesInFuture = null, IEnumerable<TransitTypeFilter> transitType = null, IEnumerable<string> agency = null, AgencyType? agencyType = null, int? timeoutInSeconds = null, string language = null, CancellationToken cancellationToken = default)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetRealTimeArrivalsPreviewRequest(format, query, metroId, queryType, stopQueryType, limit, maxMinutesInFuture, transitType, agency, agencyType, timeoutInSeconds, language);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RealTimeArrivalsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RealTimeArrivalsResponse.DeserializeRealTimeArrivalsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
