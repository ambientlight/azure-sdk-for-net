// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Mobility.Models
{
    /// <summary> The TransitStopDetailType. </summary>
    public readonly partial struct TransitStopDetailType : IEquatable<TransitStopDetailType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="TransitStopDetailType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TransitStopDetailType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AlertsValue = "alerts";
        private const string AlertDetailsValue = "alertDetails";
        private const string LinesValue = "lines";
        private const string LineGroupsValue = "lineGroups";

        /// <summary> Return any active service alerts for the specified stop. Response provides brief information for disruption in service and all basic data associated with the alert. </summary>
        public static TransitStopDetailType Alerts { get; } = new TransitStopDetailType(AlertsValue);
        /// <summary> Can only be used in conjunction with detailType=alerts.Return additional details associated with the active service alerts. </summary>
        public static TransitStopDetailType AlertDetails { get; } = new TransitStopDetailType(AlertDetailsValue);
        /// <summary> Return transit lines that stops at the specified stop. </summary>
        public static TransitStopDetailType Lines { get; } = new TransitStopDetailType(LinesValue);
        /// <summary> Return line groups that stops at the specified stop. </summary>
        public static TransitStopDetailType LineGroups { get; } = new TransitStopDetailType(LineGroupsValue);
        /// <summary> Determines if two <see cref="TransitStopDetailType"/> values are the same. </summary>
        public static bool operator ==(TransitStopDetailType left, TransitStopDetailType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TransitStopDetailType"/> values are not the same. </summary>
        public static bool operator !=(TransitStopDetailType left, TransitStopDetailType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TransitStopDetailType"/>. </summary>
        public static implicit operator TransitStopDetailType(string value) => new TransitStopDetailType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TransitStopDetailType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TransitStopDetailType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
