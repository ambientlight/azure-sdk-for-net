// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Mobility.Models
{
    /// <summary> The ModeType. </summary>
    public readonly partial struct ModeType : IEquatable<ModeType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ModeType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ModeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WalkValue = "walk";
        private const string BikeValue = "bike";
        private const string PublicTransitValue = "publicTransit";

        /// <summary> walk (pedestrian). </summary>
        public static ModeType Walk { get; } = new ModeType(WalkValue);
        /// <summary> bike. </summary>
        public static ModeType Bike { get; } = new ModeType(BikeValue);
        /// <summary> public transit. </summary>
        public static ModeType PublicTransit { get; } = new ModeType(PublicTransitValue);
        /// <summary> Determines if two <see cref="ModeType"/> values are the same. </summary>
        public static bool operator ==(ModeType left, ModeType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ModeType"/> values are not the same. </summary>
        public static bool operator !=(ModeType left, ModeType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ModeType"/>. </summary>
        public static implicit operator ModeType(string value) => new ModeType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ModeType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ModeType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
