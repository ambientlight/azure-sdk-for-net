// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Mobility.Models
{
    /// <summary> The DestinationType. </summary>
    public readonly partial struct DestinationType : IEquatable<DestinationType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="DestinationType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DestinationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PositionValue = "position";
        private const string StopIdValue = "stopId";
        private const string StopKeyValue = "stopKey";

        /// <summary> The destination of the route as a comma separated string composed by latitude followed by longitude e.g. &quot;47.641268,-122.125679&quot;. </summary>
        public static DestinationType Position { get; } = new DestinationType(PositionValue);
        /// <summary> The unique Azure Maps identifier for the respective public transit stop. When referring to public transit stops over time, it is recommended to use `stopId` since it will not change, as long as the physical stop exists. </summary>
        public static DestinationType StopId { get; } = new DestinationType(StopIdValue);
        /// <summary> The GTFS stop Id. GTFS stop Ids are provided by the transit authority and are subject to change.&lt;br&gt; **Note**: When this value is used, the metroId parameter is required. </summary>
        public static DestinationType StopKey { get; } = new DestinationType(StopKeyValue);
        /// <summary> Determines if two <see cref="DestinationType"/> values are the same. </summary>
        public static bool operator ==(DestinationType left, DestinationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DestinationType"/> values are not the same. </summary>
        public static bool operator !=(DestinationType left, DestinationType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DestinationType"/>. </summary>
        public static implicit operator DestinationType(string value) => new DestinationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DestinationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DestinationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
