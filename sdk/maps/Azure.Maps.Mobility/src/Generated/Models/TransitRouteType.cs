// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Mobility.Models
{
    /// <summary> The TransitRouteType. </summary>
    public readonly partial struct TransitRouteType : IEquatable<TransitRouteType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="TransitRouteType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TransitRouteType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OptimalValue = "optimal";
        private const string LeastWalkValue = "leastWalk";
        private const string LeastTransfersValue = "leastTransfers";

        /// <summary> The best optimal route. </summary>
        public static TransitRouteType Optimal { get; } = new TransitRouteType(OptimalValue);
        /// <summary> Route with least walk. </summary>
        public static TransitRouteType LeastWalk { get; } = new TransitRouteType(LeastWalkValue);
        /// <summary> Route with least transfers. </summary>
        public static TransitRouteType LeastTransfers { get; } = new TransitRouteType(LeastTransfersValue);
        /// <summary> Determines if two <see cref="TransitRouteType"/> values are the same. </summary>
        public static bool operator ==(TransitRouteType left, TransitRouteType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TransitRouteType"/> values are not the same. </summary>
        public static bool operator !=(TransitRouteType left, TransitRouteType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TransitRouteType"/>. </summary>
        public static implicit operator TransitRouteType(string value) => new TransitRouteType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TransitRouteType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TransitRouteType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
