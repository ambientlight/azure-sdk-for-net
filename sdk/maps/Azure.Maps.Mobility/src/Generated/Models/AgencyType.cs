// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Mobility.Models
{
    /// <summary> The AgencyType. </summary>
    public readonly partial struct AgencyType : IEquatable<AgencyType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="AgencyType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AgencyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AgencyIdValue = "agencyId";
        private const string AgencyKeyValue = "agencyKey";
        private const string AgencyNameValue = "agencyName";

        /// <summary> The Id of the transit agency, e.g. &apos;5872&apos;. </summary>
        public static AgencyType AgencyId { get; } = new AgencyType(AgencyIdValue);
        /// <summary> The agencyâ€™s GTFS Id.&lt;br&gt; **Note**: When this value is used, the metroId parameter is required. </summary>
        public static AgencyType AgencyKey { get; } = new AgencyType(AgencyKeyValue);
        /// <summary> The name of the transit agency, e.g. Metro Transit. </summary>
        public static AgencyType AgencyName { get; } = new AgencyType(AgencyNameValue);
        /// <summary> Determines if two <see cref="AgencyType"/> values are the same. </summary>
        public static bool operator ==(AgencyType left, AgencyType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AgencyType"/> values are not the same. </summary>
        public static bool operator !=(AgencyType left, AgencyType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AgencyType"/>. </summary>
        public static implicit operator AgencyType(string value) => new AgencyType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AgencyType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AgencyType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
