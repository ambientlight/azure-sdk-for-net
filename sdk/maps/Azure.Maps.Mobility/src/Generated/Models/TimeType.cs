// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Mobility.Models
{
    /// <summary> The TimeType. </summary>
    public readonly partial struct TimeType : IEquatable<TimeType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="TimeType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TimeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ArrivalValue = "arrival";
        private const string DepartureValue = "departure";
        private const string LastValue = "last";

        /// <summary> arrival at the destination point. Requires that &apos;time&apos; value must be in the future. </summary>
        public static TimeType Arrival { get; } = new TimeType(ArrivalValue);
        /// <summary> Request departure at the destination point. Requires that &apos;time&apos; value must be now or in the future. </summary>
        public static TimeType Departure { get; } = new TimeType(DepartureValue);
        /// <summary> Request the last lines for the day. </summary>
        public static TimeType Last { get; } = new TimeType(LastValue);
        /// <summary> Determines if two <see cref="TimeType"/> values are the same. </summary>
        public static bool operator ==(TimeType left, TimeType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TimeType"/> values are not the same. </summary>
        public static bool operator !=(TimeType left, TimeType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TimeType"/>. </summary>
        public static implicit operator TimeType(string value) => new TimeType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TimeType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TimeType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
