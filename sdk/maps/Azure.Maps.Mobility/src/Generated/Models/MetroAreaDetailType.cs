// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Mobility.Models
{
    /// <summary> The MetroAreaDetailType. </summary>
    public readonly partial struct MetroAreaDetailType : IEquatable<MetroAreaDetailType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="MetroAreaDetailType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MetroAreaDetailType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AgenciesValue = "agencies";
        private const string AlertsValue = "alerts";
        private const string AlertDetailsValue = "alertDetails";
        private const string TransitTypesValue = "transitTypes";

        /// <summary> Return a list of all public transit agencies operating in the given metro area. </summary>
        public static MetroAreaDetailType Agencies { get; } = new MetroAreaDetailType(AgenciesValue);
        /// <summary> Returns a list of all active service alerts, that are defined in the metro or agency level, and are not connected to a specific line or stop. </summary>
        public static MetroAreaDetailType Alerts { get; } = new MetroAreaDetailType(AlertsValue);
        /// <summary> Applicable only when alerts are requested. Returns details of the alerts. </summary>
        public static MetroAreaDetailType AlertDetails { get; } = new MetroAreaDetailType(AlertDetailsValue);
        /// <summary> Returns a list of all supported transit types in the given metro area. </summary>
        public static MetroAreaDetailType TransitTypes { get; } = new MetroAreaDetailType(TransitTypesValue);
        /// <summary> Determines if two <see cref="MetroAreaDetailType"/> values are the same. </summary>
        public static bool operator ==(MetroAreaDetailType left, MetroAreaDetailType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MetroAreaDetailType"/> values are not the same. </summary>
        public static bool operator !=(MetroAreaDetailType left, MetroAreaDetailType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MetroAreaDetailType"/>. </summary>
        public static implicit operator MetroAreaDetailType(string value) => new MetroAreaDetailType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MetroAreaDetailType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MetroAreaDetailType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
