// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Mobility.Models
{
    /// <summary> The absolute walking direction associated with this step. </summary>
    public readonly partial struct AbsoluteDirection : IEquatable<AbsoluteDirection>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="AbsoluteDirection"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AbsoluteDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NorthValue = "north";
        private const string NortheastValue = "northeast";
        private const string EastValue = "east";
        private const string SoutheastValue = "southeast";
        private const string SouthValue = "south";
        private const string SouthwestValue = "southwest";
        private const string WestValue = "west";
        private const string NorthwestValue = "northwest";

        /// <summary> North. </summary>
        public static AbsoluteDirection North { get; } = new AbsoluteDirection(NorthValue);
        /// <summary> NorthEast. </summary>
        public static AbsoluteDirection Northeast { get; } = new AbsoluteDirection(NortheastValue);
        /// <summary> East. </summary>
        public static AbsoluteDirection East { get; } = new AbsoluteDirection(EastValue);
        /// <summary> SouthEast. </summary>
        public static AbsoluteDirection Southeast { get; } = new AbsoluteDirection(SoutheastValue);
        /// <summary> South. </summary>
        public static AbsoluteDirection South { get; } = new AbsoluteDirection(SouthValue);
        /// <summary> SouthWest. </summary>
        public static AbsoluteDirection Southwest { get; } = new AbsoluteDirection(SouthwestValue);
        /// <summary> West. </summary>
        public static AbsoluteDirection West { get; } = new AbsoluteDirection(WestValue);
        /// <summary> NorthWest. </summary>
        public static AbsoluteDirection Northwest { get; } = new AbsoluteDirection(NorthwestValue);
        /// <summary> Determines if two <see cref="AbsoluteDirection"/> values are the same. </summary>
        public static bool operator ==(AbsoluteDirection left, AbsoluteDirection right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AbsoluteDirection"/> values are not the same. </summary>
        public static bool operator !=(AbsoluteDirection left, AbsoluteDirection right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AbsoluteDirection"/>. </summary>
        public static implicit operator AbsoluteDirection(string value) => new AbsoluteDirection(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AbsoluteDirection other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AbsoluteDirection other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
