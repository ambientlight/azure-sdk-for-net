// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Mobility.Models
{
    public partial class ItineraryPattern
    {
        internal static ItineraryPattern DeserializeItineraryPattern(JsonElement element)
        {
            Optional<string> patternId = default;
            Optional<string> lineId = default;
            Optional<IReadOnlyList<string>> stopIds = default;
            Optional<GeoJsonLineString> geometry = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("patternId"))
                {
                    patternId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lineId"))
                {
                    lineId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stopIds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    stopIds = array;
                    continue;
                }
                if (property.NameEquals("geometry"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    geometry = GeoJsonLineString.DeserializeGeoJsonLineString(property.Value);
                    continue;
                }
            }
            return new ItineraryPattern(patternId.Value, lineId.Value, Optional.ToList(stopIds), geometry.Value);
        }
    }
}
