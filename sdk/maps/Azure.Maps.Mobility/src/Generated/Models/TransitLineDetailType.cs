// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Mobility.Models
{
    /// <summary> The TransitLineDetailType. </summary>
    public readonly partial struct TransitLineDetailType : IEquatable<TransitLineDetailType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="TransitLineDetailType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TransitLineDetailType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AlertsValue = "alerts";
        private const string AlertDetailsValue = "alertDetails";
        private const string LinesValue = "lines";
        private const string StopsValue = "stops";
        private const string ScheduleValue = "schedule";
        private const string PatternsValue = "patterns";

        /// <summary> Return any active service alerts for the specified stop. Response provides brief information for disruption in service and all basic data associated with the alert. </summary>
        public static TransitLineDetailType Alerts { get; } = new TransitLineDetailType(AlertsValue);
        /// <summary> Can only be used in conjunction with detailType=alerts.Return additional details associated with the active service alerts. </summary>
        public static TransitLineDetailType AlertDetails { get; } = new TransitLineDetailType(AlertDetailsValue);
        /// <summary> Return transit lines that stops at the specified stop. </summary>
        public static TransitLineDetailType Lines { get; } = new TransitLineDetailType(LinesValue);
        /// <summary> Return list of stops the line group goes through. </summary>
        public static TransitLineDetailType Stops { get; } = new TransitLineDetailType(StopsValue);
        /// <summary> Return a 24h static schedule for the specified line group from the current time of the day to the end of the current day. </summary>
        public static TransitLineDetailType Schedule { get; } = new TransitLineDetailType(ScheduleValue);
        /// <summary> Return list of patterns this group is comprised of. A pattern consists of a stop sequence and shape per line. </summary>
        public static TransitLineDetailType Patterns { get; } = new TransitLineDetailType(PatternsValue);
        /// <summary> Determines if two <see cref="TransitLineDetailType"/> values are the same. </summary>
        public static bool operator ==(TransitLineDetailType left, TransitLineDetailType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TransitLineDetailType"/> values are not the same. </summary>
        public static bool operator !=(TransitLineDetailType left, TransitLineDetailType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TransitLineDetailType"/>. </summary>
        public static implicit operator TransitLineDetailType(string value) => new TransitLineDetailType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TransitLineDetailType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TransitLineDetailType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
