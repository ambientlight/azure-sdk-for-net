// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Mobility.Models
{
    public partial class ItineraryLeg
    {
        internal static ItineraryLeg DeserializeItineraryLeg(JsonElement element)
        {
            Optional<LegType> legType = default;
            Optional<string> legStartTime = default;
            Optional<string> legEndTime = default;
            Optional<IReadOnlyList<ItineraryStep>> steps = default;
            Optional<LegPoint> origin = default;
            Optional<LegPoint> destination = default;
            Optional<GeoJsonLineString> geometry = default;
            Optional<ItineraryLineGroup> lineGroup = default;
            Optional<ItineraryLine> line = default;
            Optional<IReadOnlyList<LegStop>> stops = default;
            Optional<IReadOnlyList<LineArrival>> departures = default;
            Optional<LegFare> legFare = default;
            Optional<string> waitOnVehicle = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("legType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    legType = new LegType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("legStartTime"))
                {
                    legStartTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("legEndTime"))
                {
                    legEndTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("steps"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ItineraryStep> array = new List<ItineraryStep>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ItineraryStep.DeserializeItineraryStep(item));
                    }
                    steps = array;
                    continue;
                }
                if (property.NameEquals("origin"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    origin = LegPoint.DeserializeLegPoint(property.Value);
                    continue;
                }
                if (property.NameEquals("destination"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    destination = LegPoint.DeserializeLegPoint(property.Value);
                    continue;
                }
                if (property.NameEquals("geometry"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    geometry = GeoJsonLineString.DeserializeGeoJsonLineString(property.Value);
                    continue;
                }
                if (property.NameEquals("lineGroup"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lineGroup = ItineraryLineGroup.DeserializeItineraryLineGroup(property.Value);
                    continue;
                }
                if (property.NameEquals("line"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    line = ItineraryLine.DeserializeItineraryLine(property.Value);
                    continue;
                }
                if (property.NameEquals("stops"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<LegStop> array = new List<LegStop>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LegStop.DeserializeLegStop(item));
                    }
                    stops = array;
                    continue;
                }
                if (property.NameEquals("departures"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<LineArrival> array = new List<LineArrival>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LineArrival.DeserializeLineArrival(item));
                    }
                    departures = array;
                    continue;
                }
                if (property.NameEquals("legFare"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    legFare = LegFare.DeserializeLegFare(property.Value);
                    continue;
                }
                if (property.NameEquals("waitOnVehicle"))
                {
                    waitOnVehicle = property.Value.GetString();
                    continue;
                }
            }
            return new ItineraryLeg(Optional.ToNullable(legType), legStartTime.Value, legEndTime.Value, Optional.ToList(steps), origin.Value, destination.Value, geometry.Value, lineGroup.Value, line.Value, Optional.ToList(stops), Optional.ToList(departures), legFare.Value, waitOnVehicle.Value);
        }
    }
}
