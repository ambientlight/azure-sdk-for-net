// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Mobility.Models
{
    /// <summary> The TransitTypeFilter. </summary>
    public readonly partial struct TransitTypeFilter : IEquatable<TransitTypeFilter>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="TransitTypeFilter"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TransitTypeFilter(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BusValue = "bus";
        private const string CableCarValue = "cableCar";
        private const string FerryValue = "ferry";
        private const string FunicularValue = "funicular";
        private const string GondolaValue = "gondola";
        private const string RailValue = "rail";
        private const string TramValue = "tram";
        private const string SubwayValue = "subway";

        /// <summary> bus. </summary>
        public static TransitTypeFilter Bus { get; } = new TransitTypeFilter(BusValue);
        /// <summary> cableCar. </summary>
        public static TransitTypeFilter CableCar { get; } = new TransitTypeFilter(CableCarValue);
        /// <summary> ferry. </summary>
        public static TransitTypeFilter Ferry { get; } = new TransitTypeFilter(FerryValue);
        /// <summary> funicular. </summary>
        public static TransitTypeFilter Funicular { get; } = new TransitTypeFilter(FunicularValue);
        /// <summary> gondola. </summary>
        public static TransitTypeFilter Gondola { get; } = new TransitTypeFilter(GondolaValue);
        /// <summary> rail. </summary>
        public static TransitTypeFilter Rail { get; } = new TransitTypeFilter(RailValue);
        /// <summary> tram. </summary>
        public static TransitTypeFilter Tram { get; } = new TransitTypeFilter(TramValue);
        /// <summary> subway. </summary>
        public static TransitTypeFilter Subway { get; } = new TransitTypeFilter(SubwayValue);
        /// <summary> Determines if two <see cref="TransitTypeFilter"/> values are the same. </summary>
        public static bool operator ==(TransitTypeFilter left, TransitTypeFilter right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TransitTypeFilter"/> values are not the same. </summary>
        public static bool operator !=(TransitTypeFilter left, TransitTypeFilter right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TransitTypeFilter"/>. </summary>
        public static implicit operator TransitTypeFilter(string value) => new TransitTypeFilter(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TransitTypeFilter other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TransitTypeFilter other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
