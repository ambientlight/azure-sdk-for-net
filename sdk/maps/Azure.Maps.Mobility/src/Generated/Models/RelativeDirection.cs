// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Mobility.Models
{
    /// <summary> The relative walking direction associated with applicable step. </summary>
    public readonly partial struct RelativeDirection : IEquatable<RelativeDirection>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="RelativeDirection"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RelativeDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DepartValue = "depart";
        private const string HardLeftValue = "hardLeft";
        private const string LeftValue = "left";
        private const string SlightlyLeftValue = "slightlyLeft";
        private const string ContinueValue = "continue";
        private const string SlightlyRightValue = "slightlyRight";
        private const string RightValue = "right";
        private const string HardRightValue = "hardRight";
        private const string CircleClockwiseValue = "circleClockwise";
        private const string CircleCounterclockwiseValue = "circleCounterclockwise";
        private const string ElevatorValue = "elevator";
        private const string UturnLeftValue = "uturnLeft";
        private const string UturnRightValue = "uturnRight";

        /// <summary> Leave. </summary>
        public static RelativeDirection Depart { get; } = new RelativeDirection(DepartValue);
        /// <summary> Turn sharp left. </summary>
        public static RelativeDirection HardLeft { get; } = new RelativeDirection(HardLeftValue);
        /// <summary> Turn left. </summary>
        public static RelativeDirection Left { get; } = new RelativeDirection(LeftValue);
        /// <summary> Turn slightly left. </summary>
        public static RelativeDirection SlightlyLeft { get; } = new RelativeDirection(SlightlyLeftValue);
        /// <summary> Keep going. </summary>
        public static RelativeDirection Continue { get; } = new RelativeDirection(ContinueValue);
        /// <summary> Turn slightly right. </summary>
        public static RelativeDirection SlightlyRight { get; } = new RelativeDirection(SlightlyRightValue);
        /// <summary> Turn right. </summary>
        public static RelativeDirection Right { get; } = new RelativeDirection(RightValue);
        /// <summary> Turn sharp right. </summary>
        public static RelativeDirection HardRight { get; } = new RelativeDirection(HardRightValue);
        /// <summary> Circle clockwise. </summary>
        public static RelativeDirection CircleClockwise { get; } = new RelativeDirection(CircleClockwiseValue);
        /// <summary> Circle counter clockwise. </summary>
        public static RelativeDirection CircleCounterclockwise { get; } = new RelativeDirection(CircleCounterclockwiseValue);
        /// <summary> Take the elevator. </summary>
        public static RelativeDirection Elevator { get; } = new RelativeDirection(ElevatorValue);
        /// <summary> Make a U-turn left. </summary>
        public static RelativeDirection UturnLeft { get; } = new RelativeDirection(UturnLeftValue);
        /// <summary> Make a U-turn right. </summary>
        public static RelativeDirection UturnRight { get; } = new RelativeDirection(UturnRightValue);
        /// <summary> Determines if two <see cref="RelativeDirection"/> values are the same. </summary>
        public static bool operator ==(RelativeDirection left, RelativeDirection right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RelativeDirection"/> values are not the same. </summary>
        public static bool operator !=(RelativeDirection left, RelativeDirection right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RelativeDirection"/>. </summary>
        public static implicit operator RelativeDirection(string value) => new RelativeDirection(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RelativeDirection other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RelativeDirection other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
