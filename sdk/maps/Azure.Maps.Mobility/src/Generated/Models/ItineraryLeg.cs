// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.Maps.Mobility.Models
{
    /// <summary> The ItineraryLeg. </summary>
    public partial class ItineraryLeg
    {
        /// <summary> Initializes a new instance of ItineraryLeg. </summary>
        internal ItineraryLeg()
        {
            Steps = new ChangeTrackingList<ItineraryStep>();
            Stops = new ChangeTrackingList<LegStop>();
            Departures = new ChangeTrackingList<LineArrival>();
        }

        /// <summary> Initializes a new instance of ItineraryLeg. </summary>
        /// <param name="legType"> The travel mode of the leg. </param>
        /// <param name="legStartTime"> Start time for the leg. </param>
        /// <param name="legEndTime"> End time for the leg. </param>
        /// <param name="steps"> In case of walk or bike leg, the directions. </param>
        /// <param name="origin"> The walk/bike leg’s origin. </param>
        /// <param name="destination"> The walk/bike leg’s destination. </param>
        /// <param name="geometry"> A valid `GeoJSON LineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.4) for details. </param>
        /// <param name="lineGroup"> In case of a public transit leg, the line group serving this leg. </param>
        /// <param name="line"> In case of a public transit leg, the line serving this leg. </param>
        /// <param name="stops"> List of stops comprising the line’s route within the leg (e.g. the stops the leg passes through). </param>
        /// <param name="departures"> Relevant for Public Transit and Wait legs only. </param>
        /// <param name="legFare"> Leg level public transit fare information. Returned only if fare information is available for the entire itinerary. </param>
        /// <param name="waitOnVehicle"> Indicates whether it’s necessary to wait for the next leg on the same vehicle (i.e. the bus will only change its line number). </param>
        internal ItineraryLeg(LegType? legType, string legStartTime, string legEndTime, IReadOnlyList<ItineraryStep> steps, LegPoint origin, LegPoint destination, GeoJsonLineString geometry, ItineraryLineGroup lineGroup, ItineraryLine line, IReadOnlyList<LegStop> stops, IReadOnlyList<LineArrival> departures, LegFare legFare, string waitOnVehicle)
        {
            LegType = legType;
            LegStartTime = legStartTime;
            LegEndTime = legEndTime;
            Steps = steps;
            Origin = origin;
            Destination = destination;
            Geometry = geometry;
            LineGroup = lineGroup;
            Line = line;
            Stops = stops;
            Departures = departures;
            LegFare = legFare;
            WaitOnVehicle = waitOnVehicle;
        }

        /// <summary> The travel mode of the leg. </summary>
        public LegType? LegType { get; }
        /// <summary> Start time for the leg. </summary>
        public string LegStartTime { get; }
        /// <summary> End time for the leg. </summary>
        public string LegEndTime { get; }
        /// <summary> In case of walk or bike leg, the directions. </summary>
        public IReadOnlyList<ItineraryStep> Steps { get; }
        /// <summary> The walk/bike leg’s origin. </summary>
        public LegPoint Origin { get; }
        /// <summary> The walk/bike leg’s destination. </summary>
        public LegPoint Destination { get; }
        /// <summary> A valid `GeoJSON LineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.4) for details. </summary>
        public GeoJsonLineString Geometry { get; }
        /// <summary> In case of a public transit leg, the line group serving this leg. </summary>
        public ItineraryLineGroup LineGroup { get; }
        /// <summary> In case of a public transit leg, the line serving this leg. </summary>
        public ItineraryLine Line { get; }
        /// <summary> List of stops comprising the line’s route within the leg (e.g. the stops the leg passes through). </summary>
        public IReadOnlyList<LegStop> Stops { get; }
        /// <summary> Relevant for Public Transit and Wait legs only. </summary>
        public IReadOnlyList<LineArrival> Departures { get; }
        /// <summary> Leg level public transit fare information. Returned only if fare information is available for the entire itinerary. </summary>
        public LegFare LegFare { get; }
        /// <summary> Indicates whether it’s necessary to wait for the next leg on the same vehicle (i.e. the bus will only change its line number). </summary>
        public string WaitOnVehicle { get; }
    }
}
