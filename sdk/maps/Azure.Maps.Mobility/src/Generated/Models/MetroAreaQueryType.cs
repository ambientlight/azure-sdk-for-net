// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Mobility.Models
{
    /// <summary> The MetroAreaQueryType. </summary>
    public readonly partial struct MetroAreaQueryType : IEquatable<MetroAreaQueryType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="MetroAreaQueryType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MetroAreaQueryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PositionValue = "position";
        private const string CountryCodeValue = "countryCode";

        /// <summary> The origin of the route as a comma separated string composed by latitude followed by longitude e.g. &quot;47.641268,-122.125679&quot;. </summary>
        public static MetroAreaQueryType Position { get; } = new MetroAreaQueryType(PositionValue);
        /// <summary> 2-character [ISO 3166-1](https://www.iso.org/iso-3166-country-codes.html) alpha-2 country code. E.g. US. </summary>
        public static MetroAreaQueryType CountryCode { get; } = new MetroAreaQueryType(CountryCodeValue);
        /// <summary> Determines if two <see cref="MetroAreaQueryType"/> values are the same. </summary>
        public static bool operator ==(MetroAreaQueryType left, MetroAreaQueryType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MetroAreaQueryType"/> values are not the same. </summary>
        public static bool operator !=(MetroAreaQueryType left, MetroAreaQueryType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MetroAreaQueryType"/>. </summary>
        public static implicit operator MetroAreaQueryType(string value) => new MetroAreaQueryType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MetroAreaQueryType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MetroAreaQueryType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
