// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Mobility.Models
{
    /// <summary> The LegType. </summary>
    public readonly partial struct LegType : IEquatable<LegType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="LegType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LegType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WalkValue = "Walk";
        private const string BicycleValue = "Bicycle";
        private const string TramValue = "Tram";
        private const string SubwayValue = "Subway";
        private const string RailValue = "Rail";
        private const string BusValue = "Bus";
        private const string FerryValue = "Ferry";
        private const string CableValue = "Cable";
        private const string GondolaValue = "Gondola";
        private const string FunicularValue = "Funicular";
        private const string PathWayWalkValue = "PathWayWalk";
        private const string WaitValue = "Wait";
        private const string WaitOnVehicleValue = "WaitOnVehicle";

        /// <summary> Pedestrian walk. </summary>
        public static LegType Walk { get; } = new LegType(WalkValue);
        /// <summary> Bicycle. </summary>
        public static LegType Bicycle { get; } = new LegType(BicycleValue);
        /// <summary> Tram. </summary>
        public static LegType Tram { get; } = new LegType(TramValue);
        /// <summary> Subway. </summary>
        public static LegType Subway { get; } = new LegType(SubwayValue);
        /// <summary> Rail. </summary>
        public static LegType Rail { get; } = new LegType(RailValue);
        /// <summary> Bus. </summary>
        public static LegType Bus { get; } = new LegType(BusValue);
        /// <summary> Ferry. </summary>
        public static LegType Ferry { get; } = new LegType(FerryValue);
        /// <summary> Cable Car. </summary>
        public static LegType Cable { get; } = new LegType(CableValue);
        /// <summary> Gondola. </summary>
        public static LegType Gondola { get; } = new LegType(GondolaValue);
        /// <summary> Funicular. </summary>
        public static LegType Funicular { get; } = new LegType(FunicularValue);
        /// <summary> A Leg describing a walk within a compound, e.g. Central Station. </summary>
        public static LegType PathWayWalk { get; } = new LegType(PathWayWalkValue);
        /// <summary> A Leg describing a wait for the next public transit leg. </summary>
        public static LegType Wait { get; } = new LegType(WaitValue);
        /// <summary> Itâ€™s necessary to wait for the next leg on the same vehicle (i.e. the bus will only change its line number). </summary>
        public static LegType WaitOnVehicle { get; } = new LegType(WaitOnVehicleValue);
        /// <summary> Determines if two <see cref="LegType"/> values are the same. </summary>
        public static bool operator ==(LegType left, LegType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LegType"/> values are not the same. </summary>
        public static bool operator !=(LegType left, LegType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LegType"/>. </summary>
        public static implicit operator LegType(string value) => new LegType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LegType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LegType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
