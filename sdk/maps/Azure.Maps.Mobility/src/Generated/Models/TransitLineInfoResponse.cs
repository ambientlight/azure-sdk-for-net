// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.Maps.Mobility.Models
{
    /// <summary> This object is returned from a successful Transit Line Info call. </summary>
    public partial class TransitLineInfoResponse
    {
        /// <summary> Initializes a new instance of TransitLineInfoResponse. </summary>
        internal TransitLineInfoResponse()
        {
            Lines = new ChangeTrackingList<ItineraryLine>();
            Stops = new ChangeTrackingList<LegStop>();
            Patterns = new ChangeTrackingList<ItineraryPattern>();
        }

        /// <summary> Initializes a new instance of TransitLineInfoResponse. </summary>
        /// <param name="lineGroup"> Groups together all lines that are logically part of the same group. Typically contains 2 lines having the same agency and line, one going from A to B, and the other from B to A. </param>
        /// <param name="lines"> The line group’s basic info and list of the lines. </param>
        /// <param name="stops"> List of stops the line group goes through. </param>
        /// <param name="patterns"> List of patterns this group is comprised of. A pattern consists of a stop sequence and shape per a line in GeoJSON format. </param>
        /// <param name="schedule"> Line schedule for the current 24h. May be null in case no schedule exists for the current time. </param>
        internal TransitLineInfoResponse(ItineraryLineGroup lineGroup, IReadOnlyList<ItineraryLine> lines, IReadOnlyList<LegStop> stops, IReadOnlyList<ItineraryPattern> patterns, LineArrival schedule)
        {
            LineGroup = lineGroup;
            Lines = lines;
            Stops = stops;
            Patterns = patterns;
            Schedule = schedule;
        }

        /// <summary> Groups together all lines that are logically part of the same group. Typically contains 2 lines having the same agency and line, one going from A to B, and the other from B to A. </summary>
        public ItineraryLineGroup LineGroup { get; }
        /// <summary> The line group’s basic info and list of the lines. </summary>
        public IReadOnlyList<ItineraryLine> Lines { get; }
        /// <summary> List of stops the line group goes through. </summary>
        public IReadOnlyList<LegStop> Stops { get; }
        /// <summary> List of patterns this group is comprised of. A pattern consists of a stop sequence and shape per a line in GeoJSON format. </summary>
        public IReadOnlyList<ItineraryPattern> Patterns { get; }
        /// <summary> Line schedule for the current 24h. May be null in case no schedule exists for the current time. </summary>
        public LineArrival Schedule { get; }
    }
}
