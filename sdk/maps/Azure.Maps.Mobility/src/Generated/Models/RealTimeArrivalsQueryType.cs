// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Mobility.Models
{
    /// <summary> The RealTimeArrivalsQueryType. </summary>
    public readonly partial struct RealTimeArrivalsQueryType : IEquatable<RealTimeArrivalsQueryType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="RealTimeArrivalsQueryType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RealTimeArrivalsQueryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StopsValue = "stops";
        private const string LineValue = "line";
        private const string LineAndStopValue = "lineAndStop";
        private const string PositionValue = "position";

        /// <summary> One or multiple stops as a comma separated list. Returns the requested number of live arrivals for all lines arriving at the specified stop. Defined by parameter stopQueryType. </summary>
        public static RealTimeArrivalsQueryType Stops { get; } = new RealTimeArrivalsQueryType(StopsValue);
        /// <summary> Returns the next live arrival times for each stop within the specified line. lineId, for example, &apos;3785742&apos;. </summary>
        public static RealTimeArrivalsQueryType Line { get; } = new RealTimeArrivalsQueryType(LineValue);
        /// <summary> Returns up to three next Live Arrival times for a given line at a given stop. Comma-separated list including lineId and stop identifier, for example, 1228526,14014071 (lineId,stopId). </summary>
        public static RealTimeArrivalsQueryType LineAndStop { get; } = new RealTimeArrivalsQueryType(LineAndStopValue);
        /// <summary> Returns arrivals of a line to stops near the userâ€™s location. The applicable location query specified as a comma separated string composed by latitude followed by longitude e.g. &quot;47.641268,-122.125679&quot;. </summary>
        public static RealTimeArrivalsQueryType Position { get; } = new RealTimeArrivalsQueryType(PositionValue);
        /// <summary> Determines if two <see cref="RealTimeArrivalsQueryType"/> values are the same. </summary>
        public static bool operator ==(RealTimeArrivalsQueryType left, RealTimeArrivalsQueryType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RealTimeArrivalsQueryType"/> values are not the same. </summary>
        public static bool operator !=(RealTimeArrivalsQueryType left, RealTimeArrivalsQueryType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RealTimeArrivalsQueryType"/>. </summary>
        public static implicit operator RealTimeArrivalsQueryType(string value) => new RealTimeArrivalsQueryType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RealTimeArrivalsQueryType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RealTimeArrivalsQueryType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
