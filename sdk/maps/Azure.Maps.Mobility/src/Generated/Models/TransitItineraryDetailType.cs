// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Mobility.Models
{
    /// <summary> The TransitItineraryDetailType. </summary>
    public readonly partial struct TransitItineraryDetailType : IEquatable<TransitItineraryDetailType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="TransitItineraryDetailType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TransitItineraryDetailType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GeometryValue = "geometry";
        private const string ScheduleValue = "schedule";

        /// <summary> Shape of an in GeoJSON format. For public transit legs will return also the stops that the leg passes through. For walk and bike legs, will return also the turn-by-turn navigation data. </summary>
        public static TransitItineraryDetailType Geometry { get; } = new TransitItineraryDetailType(GeometryValue);
        /// <summary> Static schedule data as to all departures of Public Transit legs from the current time of the day to the end of the current day. </summary>
        public static TransitItineraryDetailType Schedule { get; } = new TransitItineraryDetailType(ScheduleValue);
        /// <summary> Determines if two <see cref="TransitItineraryDetailType"/> values are the same. </summary>
        public static bool operator ==(TransitItineraryDetailType left, TransitItineraryDetailType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TransitItineraryDetailType"/> values are not the same. </summary>
        public static bool operator !=(TransitItineraryDetailType left, TransitItineraryDetailType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TransitItineraryDetailType"/>. </summary>
        public static implicit operator TransitItineraryDetailType(string value) => new TransitItineraryDetailType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TransitItineraryDetailType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TransitItineraryDetailType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
